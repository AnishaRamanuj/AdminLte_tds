// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.



using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;
using Microsoft.ApplicationBlocks1.Data;
using CommonLibrary;
using System.Configuration;

namespace JTMSProject
{
    public partial class OpeMaster : CommonFunctions 
    {
        private static IOpeMasterPersister _DefaultPersister;
        private IOpeMasterPersister _Persister;
        private int _OpeId;
        private int? _id;
        private int? _CompId;
        private string _OPEName;

        static OpeMaster()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerOpeMasterPersister();
        }

        public OpeMaster()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public OpeMaster(int _OpeId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._OpeId = _OpeId; 

            // Call associated retrieve method
            Retrieve();
        }

        public OpeMaster(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "OPEID":
                        this.OpeId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "ID":
                        if(row.IsNull(i) == false)
                        {
                            this.id = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "COMPID":
                        if(row.IsNull(i) == false)
                        {
                            this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "OPENAME":
                        if(row.IsNull(i) == false)
                        {
                            this.OPEName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                }
            }
        }

        //public SqlDataReader GetIenumrable_sRegistration_Job(Expenses obj)
        //{
        //    try
        //    {
        //        SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
        //        SqlParameter[] param = new SqlParameter[3];
        //        param[0] = new SqlParameter("@CompanyID", obj.CompId);
        //        param[1] = new SqlParameter("@PageIndex", obj.pageIndex);
        //        param[2] = new SqlParameter("@PageSize", obj.pageNewSize);

        //        return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_sRegistration_Job", param);
        //    }
        //    catch (Exception ex)
        //    {
        //        PrintError(ex, "Expenses");
        //        return null;

        //    }
        //}

        //public IEnumerable<Expenses> SqlDR_GetIenumrable_sRegistration_Job(Expenses obj)
        //{
        //    try
        //    {
        //        List<Expenses> tbl = new List<Expenses>();

        //        using (SqlDataReader drrr = GetIenumrable_sRegistration_Job(obj))
        //        {
        //            while (drrr.Read())
        //            {
        //                tbl.Add(new Expenses()
        //                {
        //                    ExpenseId  = GetValue<int>(drrr["Jobid"].ToString()),
        //                    Tsid  = GetValue<int>(drrr["Cltid"].ToString()),
        //                    ExpenseName  = GetValue<string>(drrr["MJobName"].ToString()),
        //                    ExpenseNarr  = GetValue<string>(drrr["DID"].ToString()),
        //                    EAmt  = GetValue<float>(drrr["DID"].ToString()),
        //                    Billable = GetValue<bool>(drrr["DID"].ToString()),
        //                });
        //            }

        //        }
        //        return tbl as IEnumerable<Expenses>;
        //    }
        //    catch (Exception ex)
        //    {
        //        PrintError(ex, "Expenses");
        //        return null;
        //    }
        //}

        public static IOpeMasterPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IOpeMasterPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int OpeId
        {
            get { return _OpeId; }
            set { _OpeId = value; }
        }

        public int? id
        {
            get { return _id; }
            set { _id = value; }
        }

        public int? CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public string OPEName
        {
            get { return _OPEName; }
            set { _OPEName = value; }
        }

        public virtual void Clone(OpeMaster sourceObject)
        {
            // Clone attributes from source object
            this._OpeId = sourceObject.OpeId; 
            this._id = sourceObject.id; 
            this._CompId = sourceObject.CompId; 
            this._OPEName = sourceObject.OPEName; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<OpeMaster> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface IOpeMasterPersister
    {
        int Retrieve(OpeMaster opeMaster);
        int Update(OpeMaster opeMaster);
        int Delete(OpeMaster opeMaster);
        int Insert(OpeMaster opeMaster);
        IReader<OpeMaster> ListAll();
    }
    
    public partial class SqlServerOpeMasterPersister : SqlPersisterBase, IOpeMasterPersister
    {
        public SqlServerOpeMasterPersister()
        {
        }

        public SqlServerOpeMasterPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerOpeMasterPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerOpeMasterPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(OpeMaster opeMaster)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("OpeMasterGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vOpeId = new SqlParameter("@OpeId", SqlDbType.Int);
                    vOpeId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vOpeId);
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vOPEName = new SqlParameter("@OPEName", SqlDbType.VarChar, 70);
                    vOPEName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vOPEName);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vOpeId, opeMaster.OpeId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        opeMaster.OpeId = SqlServerHelper.ToInt32(vOpeId); 
                        opeMaster.id = SqlServerHelper.ToNullableInt32(vid); 
                        opeMaster.CompId = SqlServerHelper.ToNullableInt32(vCompId); 
                        opeMaster.OPEName = SqlServerHelper.ToString(vOPEName); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(OpeMaster opeMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("OpeMasterUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vOpeId = new SqlParameter("@OpeId", SqlDbType.Int);
                vOpeId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vOpeId);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vOPEName = new SqlParameter("@OPEName", SqlDbType.VarChar, 70);
                vOPEName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vOPEName);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vOpeId, opeMaster.OpeId);
                SqlServerHelper.SetParameterValue(vid, opeMaster.id);
                SqlServerHelper.SetParameterValue(vCompId, opeMaster.CompId);
                SqlServerHelper.SetParameterValue(vOPEName, opeMaster.OPEName);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(OpeMaster opeMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("OpeMasterDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vOpeId = new SqlParameter("@OpeId", SqlDbType.Int);
                    vOpeId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vOpeId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vOpeId, opeMaster.OpeId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(OpeMaster opeMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("OpeMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vOpeId = new SqlParameter("@OpeId", SqlDbType.Int);
                vOpeId.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vOpeId);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vOPEName = new SqlParameter("@OPEName", SqlDbType.VarChar, 70);
                vOPEName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vOPEName);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vOpeId, 
                    opeMaster.OpeId, 
                    0);
                SqlServerHelper.SetParameterValue(vid, opeMaster.id);
                SqlServerHelper.SetParameterValue(vCompId, opeMaster.CompId);
                SqlServerHelper.SetParameterValue(vOPEName, opeMaster.OPEName);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    opeMaster.OpeId = SqlServerHelper.ToInt32(vOpeId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<OpeMaster> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("OpeMasterListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerOpeMasterReader(reader); 
            }
        }

    }

    public partial class SqlServerOpeMasterReader : IReader<OpeMaster>
    {
        private SqlDataReader sqlDataReader;

        private OpeMaster _OpeMaster;

        private int _OpeIdOrdinal = -1;
        private int _idOrdinal = -1;
        private int _CompIdOrdinal = -1;
        private int _OPENameOrdinal = -1;

        public SqlServerOpeMasterReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "OPEID":
                        _OpeIdOrdinal = i; 
                        break;
                    
                    case "ID":
                        _idOrdinal = i; 
                        break;
                    
                    case "COMPID":
                        _CompIdOrdinal = i; 
                        break;
                    
                    case "OPENAME":
                        _OPENameOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<OpeMaster> Implementation
        
        public bool Read()
        {
            _OpeMaster = null; 
            return this.sqlDataReader.Read(); 
        }

        public OpeMaster Current
        {
            get
            {
                if(_OpeMaster == null)
                {
                    _OpeMaster = new OpeMaster();
                    if(_OpeIdOrdinal != -1)
                    {
                        _OpeMaster.OpeId = SqlServerHelper.ToInt32(sqlDataReader, _OpeIdOrdinal); 
                    }
                    _OpeMaster.id = SqlServerHelper.ToNullableInt32(sqlDataReader, _idOrdinal); 
                    _OpeMaster.CompId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIdOrdinal); 
                    _OpeMaster.OPEName = SqlServerHelper.ToString(sqlDataReader, _OPENameOrdinal); 
                }
                

                return _OpeMaster; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<OpeMaster> ToList()
        {
            List<OpeMaster> list = new List<OpeMaster>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<OpeMaster> Implementation
        
        public IEnumerator<OpeMaster> GetEnumerator()
        {
            return new OpeMasterEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new OpeMasterEnumerator(this); 
        }

        #endregion
        
        
        private partial class OpeMasterEnumerator : IEnumerator<OpeMaster>
        {
            private IReader<OpeMaster> opeMasterReader;

            public OpeMasterEnumerator(IReader<OpeMaster> opeMasterReader)
            {
                this.opeMasterReader = opeMasterReader; 
            }

            #region IEnumerator<OpeMaster> Members
            
            public OpeMaster Current
            {
                get { return this.opeMasterReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.opeMasterReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.opeMasterReader.Current; }
            }

            public bool MoveNext()
            {
                return this.opeMasterReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of opemaster reader is not supported."); 
            }

            #endregion
            
        }
    }
}
