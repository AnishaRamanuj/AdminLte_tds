// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace JTMSProject
{
    public partial class JobresetTable
    {
        private static IJobresetTablePersister _DefaultPersister;
        private IJobresetTablePersister _Persister;
        private int _JobRId;
        private int? _CLTId;
        private int? _CompId;
        private string _JobName;
        private int? _JobId;
        private DateTime? _Date;
        private string _Reason;
        private Stream _ReasonStream;

        static JobresetTable()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerJobresetTablePersister();
        }

        public JobresetTable()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public JobresetTable(int _JobRId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._JobRId = _JobRId; 

            // Call associated retrieve method
            Retrieve();
        }

        public JobresetTable(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "JOBRID":
                        this.JobRId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "CLTID":
                        if(row.IsNull(i) == false)
                        {
                            this.CLTId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "COMPID":
                        if(row.IsNull(i) == false)
                        {
                            this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "JOBNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.JobName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "JOBID":
                        if(row.IsNull(i) == false)
                        {
                            this.JobId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "DATE":
                        if(row.IsNull(i) == false)
                        {
                            this.Date = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "REASON":
                        if(row.IsNull(i) == false)
                        {
                            this.Reason = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                }
            }
        }

        public static IJobresetTablePersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IJobresetTablePersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int JobRId
        {
            get { return _JobRId; }
            set { _JobRId = value; }
        }

        public int? CLTId
        {
            get { return _CLTId; }
            set { _CLTId = value; }
        }

        public int? CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public string JobName
        {
            get { return _JobName; }
            set { _JobName = value; }
        }

        public int? JobId
        {
            get { return _JobId; }
            set { _JobId = value; }
        }

        public DateTime? Date
        {
            get { return _Date; }
            set { _Date = value; }
        }

        public string Reason
        {
            get { return _Reason; }
            set { _Reason = value; }
        }

        public Stream ReasonStream
        {
            get { return _ReasonStream; }
            set { _ReasonStream = value; }
        }

        public virtual void Clone(JobresetTable sourceObject)
        {
            // Clone attributes from source object
            this._JobRId = sourceObject.JobRId; 
            this._CLTId = sourceObject.CLTId; 
            this._CompId = sourceObject.CompId; 
            this._JobName = sourceObject.JobName; 
            this._JobId = sourceObject.JobId; 
            this._Date = sourceObject.Date; 
            this._Reason = sourceObject.Reason; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<JobresetTable> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<JobresetTable> ListForCLTId(int? cLTId)
        {
            return _DefaultPersister.ListForCLTId(cLTId); 
        }

    }
    
    public partial interface IJobresetTablePersister
    {
        int Retrieve(JobresetTable jobresetTable);
        int Update(JobresetTable jobresetTable);
        int Delete(JobresetTable jobresetTable);
        int Insert(JobresetTable jobresetTable);
        IReader<JobresetTable> ListAll();
        IReader<JobresetTable> ListForCLTId(int? cLTId);
    }
    
    public partial class SqlServerJobresetTablePersister : SqlPersisterBase, IJobresetTablePersister
    {
        public SqlServerJobresetTablePersister()
        {
        }

        public SqlServerJobresetTablePersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerJobresetTablePersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerJobresetTablePersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(JobresetTable jobresetTable)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobresetTableGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vJobRId = new SqlParameter("@JobRId", SqlDbType.Int);
                    vJobRId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vJobRId);
                    SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                    vCLTId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCLTId);
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                    vJobName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vJobName);
                    SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                    vJobId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vJobId);
                    SqlParameter vDate = new SqlParameter("@Date", SqlDbType.DateTime);
                    vDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vDate);
                    SqlParameter vReason = new SqlParameter("@Reason", SqlDbType.VarChar, 2147483647);
                    vReason.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vReason);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vJobRId, jobresetTable.JobRId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        jobresetTable.JobRId = SqlServerHelper.ToInt32(vJobRId); 
                        jobresetTable.CLTId = SqlServerHelper.ToNullableInt32(vCLTId); 
                        jobresetTable.CompId = SqlServerHelper.ToNullableInt32(vCompId); 
                        jobresetTable.JobName = SqlServerHelper.ToString(vJobName); 
                        jobresetTable.JobId = SqlServerHelper.ToNullableInt32(vJobId); 
                        jobresetTable.Date = SqlServerHelper.ToNullableDateTime(vDate); 
                        if(jobresetTable.ReasonStream != null)
                            SqlServerHelper.ToStream(vReason, jobresetTable.ReasonStream);
                        else
                            jobresetTable.Reason = SqlServerHelper.ToString(vReason); 
                        

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(JobresetTable jobresetTable)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobresetTableUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vJobRId = new SqlParameter("@JobRId", SqlDbType.Int);
                vJobRId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobRId);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                vJobName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobName);
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vDate = new SqlParameter("@Date", SqlDbType.DateTime);
                vDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDate);
                SqlParameter vReason = new SqlParameter("@Reason", SqlDbType.VarChar, 2147483647);
                vReason.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vReason);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vJobRId, jobresetTable.JobRId);
                SqlServerHelper.SetParameterValue(vCLTId, jobresetTable.CLTId);
                SqlServerHelper.SetParameterValue(vCompId, jobresetTable.CompId);
                SqlServerHelper.SetParameterValue(vJobName, jobresetTable.JobName);
                SqlServerHelper.SetParameterValue(vJobId, jobresetTable.JobId);
                SqlServerHelper.SetParameterValue(vDate, jobresetTable.Date);
                if(jobresetTable.ReasonStream != null)
                    SqlServerHelper.SetParameterValue(vReason, jobresetTable.ReasonStream);
                else
                    SqlServerHelper.SetParameterValue(vReason, jobresetTable.Reason);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(JobresetTable jobresetTable)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobresetTableDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vJobRId = new SqlParameter("@JobRId", SqlDbType.Int);
                    vJobRId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vJobRId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vJobRId, jobresetTable.JobRId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(JobresetTable jobresetTable)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobresetTableInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vJobRId = new SqlParameter("@JobRId", SqlDbType.Int);
                vJobRId.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vJobRId);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                vJobName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobName);
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vDate = new SqlParameter("@Date", SqlDbType.DateTime);
                vDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDate);
                SqlParameter vReason = new SqlParameter("@Reason", SqlDbType.VarChar, 2147483647);
                vReason.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vReason);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vJobRId, 
                    jobresetTable.JobRId, 
                    0);
                SqlServerHelper.SetParameterValue(vCLTId, jobresetTable.CLTId);
                SqlServerHelper.SetParameterValue(vCompId, jobresetTable.CompId);
                SqlServerHelper.SetParameterValue(vJobName, jobresetTable.JobName);
                SqlServerHelper.SetParameterValue(vJobId, jobresetTable.JobId);
                SqlServerHelper.SetParameterValue(vDate, jobresetTable.Date);
                if(jobresetTable.ReasonStream != null)
                    SqlServerHelper.SetParameterValue(vReason, jobresetTable.ReasonStream);
                else
                    SqlServerHelper.SetParameterValue(vReason, jobresetTable.Reason);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    jobresetTable.JobRId = SqlServerHelper.ToInt32(vJobRId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<JobresetTable> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobresetTableListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerJobresetTableReader(reader); 
            }
        }

        public IReader<JobresetTable> ListForCLTId(int? cLTId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobresetTableListForCLTId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCLTId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vCLTId, cLTId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerJobresetTableReader(reader); 
            }
        }

    }

    public partial class SqlServerJobresetTableReader : IReader<JobresetTable>
    {
        private SqlDataReader sqlDataReader;

        private JobresetTable _JobresetTable;

        private int _JobRIdOrdinal = -1;
        private int _CLTIdOrdinal = -1;
        private int _CompIdOrdinal = -1;
        private int _JobNameOrdinal = -1;
        private int _JobIdOrdinal = -1;
        private int _DateOrdinal = -1;
        private int _ReasonOrdinal = -1;

        public SqlServerJobresetTableReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "JOBRID":
                        _JobRIdOrdinal = i; 
                        break;
                    
                    case "CLTID":
                        _CLTIdOrdinal = i; 
                        break;
                    
                    case "COMPID":
                        _CompIdOrdinal = i; 
                        break;
                    
                    case "JOBNAME":
                        _JobNameOrdinal = i; 
                        break;
                    
                    case "JOBID":
                        _JobIdOrdinal = i; 
                        break;
                    
                    case "DATE":
                        _DateOrdinal = i; 
                        break;
                    
                    case "REASON":
                        _ReasonOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<JobresetTable> Implementation
        
        public bool Read()
        {
            _JobresetTable = null; 
            return this.sqlDataReader.Read(); 
        }

        public JobresetTable Current
        {
            get
            {
                if(_JobresetTable == null)
                {
                    _JobresetTable = new JobresetTable();
                    if(_JobRIdOrdinal != -1)
                    {
                        _JobresetTable.JobRId = SqlServerHelper.ToInt32(sqlDataReader, _JobRIdOrdinal); 
                    }
                    _JobresetTable.CLTId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CLTIdOrdinal); 
                    _JobresetTable.CompId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIdOrdinal); 
                    _JobresetTable.JobName = SqlServerHelper.ToString(sqlDataReader, _JobNameOrdinal); 
                    _JobresetTable.JobId = SqlServerHelper.ToNullableInt32(sqlDataReader, _JobIdOrdinal); 
                    _JobresetTable.Date = SqlServerHelper.ToNullableDateTime(sqlDataReader, _DateOrdinal); 
                    _JobresetTable.Reason = SqlServerHelper.ToString(sqlDataReader, _ReasonOrdinal); 
                }
                

                return _JobresetTable; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<JobresetTable> ToList()
        {
            List<JobresetTable> list = new List<JobresetTable>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<JobresetTable> Implementation
        
        public IEnumerator<JobresetTable> GetEnumerator()
        {
            return new JobresetTableEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new JobresetTableEnumerator(this); 
        }

        #endregion
        
        
        private partial class JobresetTableEnumerator : IEnumerator<JobresetTable>
        {
            private IReader<JobresetTable> jobresetTableReader;

            public JobresetTableEnumerator(IReader<JobresetTable> jobresetTableReader)
            {
                this.jobresetTableReader = jobresetTableReader; 
            }

            #region IEnumerator<JobresetTable> Members
            
            public JobresetTable Current
            {
                get { return this.jobresetTableReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.jobresetTableReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.jobresetTableReader.Current; }
            }

            public bool MoveNext()
            {
                return this.jobresetTableReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of jobresettable reader is not supported."); 
            }

            #endregion
            
        }
    }
}
