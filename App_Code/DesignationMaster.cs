// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace JTMSProject
{
    public partial class DesignationMaster
    {
        private static IDesignationMasterPersister _DefaultPersister;
        private IDesignationMasterPersister _Persister;
        private int _DsgId;
        private int? _id;
        private int? _CompId;
        private string _DesignationName;
        private double? _HourlyCharges;

        static DesignationMaster()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerDesignationMasterPersister();
        }

        public DesignationMaster()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public DesignationMaster(int _DsgId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._DsgId = _DsgId; 

            // Call associated retrieve method
            Retrieve();
        }

        public DesignationMaster(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "DSGID":
                        this.DsgId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "ID":
                        if(row.IsNull(i) == false)
                        {
                            this.id = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "COMPID":
                        if(row.IsNull(i) == false)
                        {
                            this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "DESIGNATIONNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.DesignationName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "HOURLYCHARGES":
                        if(row.IsNull(i) == false)
                        {
                            this.HourlyCharges = Convert.ToDouble(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                }
            }
        }

        public static IDesignationMasterPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IDesignationMasterPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int DsgId
        {
            get { return _DsgId; }
            set { _DsgId = value; }
        }

        public int? id
        {
            get { return _id; }
            set { _id = value; }
        }

        public int? CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public string DesignationName
        {
            get { return _DesignationName; }
            set { _DesignationName = value; }
        }

        public double? HourlyCharges
        {
            get { return _HourlyCharges; }
            set { _HourlyCharges = value; }
        }

        public virtual void Clone(DesignationMaster sourceObject)
        {
            // Clone attributes from source object
            this._DsgId = sourceObject.DsgId; 
            this._id = sourceObject.id; 
            this._CompId = sourceObject.CompId; 
            this._DesignationName = sourceObject.DesignationName; 
            this._HourlyCharges = sourceObject.HourlyCharges; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<DesignationMaster> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface IDesignationMasterPersister
    {
        int Retrieve(DesignationMaster designationMaster);
        int Update(DesignationMaster designationMaster);
        int Delete(DesignationMaster designationMaster);
        int Insert(DesignationMaster designationMaster);
        IReader<DesignationMaster> ListAll();
    }
    
    public partial class SqlServerDesignationMasterPersister : SqlPersisterBase, IDesignationMasterPersister
    {
        public SqlServerDesignationMasterPersister()
        {
        }

        public SqlServerDesignationMasterPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerDesignationMasterPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerDesignationMasterPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(DesignationMaster designationMaster)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("DesignationMasterGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vDsgId = new SqlParameter("@DsgId", SqlDbType.Int);
                    vDsgId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vDsgId);
                    SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                    vid.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vid);
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vDesignationName = new SqlParameter("@DesignationName", SqlDbType.VarChar, 70);
                    vDesignationName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vDesignationName);
                    SqlParameter vHourlyCharges = new SqlParameter("@HourlyCharges", SqlDbType.Float);
                    vHourlyCharges.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vHourlyCharges);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vDsgId, designationMaster.DsgId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        designationMaster.DsgId = SqlServerHelper.ToInt32(vDsgId); 
                        designationMaster.id = SqlServerHelper.ToNullableInt32(vid); 
                        designationMaster.CompId = SqlServerHelper.ToNullableInt32(vCompId); 
                        designationMaster.DesignationName = SqlServerHelper.ToString(vDesignationName); 
                        designationMaster.HourlyCharges = SqlServerHelper.ToNullableDouble(vHourlyCharges); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(DesignationMaster designationMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("DesignationMasterUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vDsgId = new SqlParameter("@DsgId", SqlDbType.Int);
                vDsgId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDsgId);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vDesignationName = new SqlParameter("@DesignationName", SqlDbType.VarChar, 70);
                vDesignationName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDesignationName);
                SqlParameter vHourlyCharges = new SqlParameter("@HourlyCharges", SqlDbType.Float);
                vHourlyCharges.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vHourlyCharges);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vDsgId, designationMaster.DsgId);
                SqlServerHelper.SetParameterValue(vid, designationMaster.id);
                SqlServerHelper.SetParameterValue(vCompId, designationMaster.CompId);
                SqlServerHelper.SetParameterValue(vDesignationName, designationMaster.DesignationName);
                SqlServerHelper.SetParameterValue(vHourlyCharges, designationMaster.HourlyCharges);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(DesignationMaster designationMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("DesignationMasterDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vDsgId = new SqlParameter("@DsgId", SqlDbType.Int);
                    vDsgId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vDsgId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vDsgId, designationMaster.DsgId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(DesignationMaster designationMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("DesignationMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vDsgId = new SqlParameter("@DsgId", SqlDbType.Int);
                vDsgId.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vDsgId);
                SqlParameter vid = new SqlParameter("@id", SqlDbType.Int);
                vid.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vid);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vDesignationName = new SqlParameter("@DesignationName", SqlDbType.VarChar, 70);
                vDesignationName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDesignationName);
                SqlParameter vHourlyCharges = new SqlParameter("@HourlyCharges", SqlDbType.Float);
                vHourlyCharges.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vHourlyCharges);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vDsgId, 
                    designationMaster.DsgId, 
                    0);
                SqlServerHelper.SetParameterValue(vid, designationMaster.id);
                SqlServerHelper.SetParameterValue(vCompId, designationMaster.CompId);
                SqlServerHelper.SetParameterValue(vDesignationName, designationMaster.DesignationName);
                SqlServerHelper.SetParameterValue(vHourlyCharges, designationMaster.HourlyCharges);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    designationMaster.DsgId = SqlServerHelper.ToInt32(vDsgId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<DesignationMaster> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("DesignationMasterListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerDesignationMasterReader(reader); 
            }
        }

    }

    public partial class SqlServerDesignationMasterReader : IReader<DesignationMaster>
    {
        private SqlDataReader sqlDataReader;

        private DesignationMaster _DesignationMaster;

        private int _DsgIdOrdinal = -1;
        private int _idOrdinal = -1;
        private int _CompIdOrdinal = -1;
        private int _DesignationNameOrdinal = -1;
        private int _HourlyChargesOrdinal = -1;

        public SqlServerDesignationMasterReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "DSGID":
                        _DsgIdOrdinal = i; 
                        break;
                    
                    case "ID":
                        _idOrdinal = i; 
                        break;
                    
                    case "COMPID":
                        _CompIdOrdinal = i; 
                        break;
                    
                    case "DESIGNATIONNAME":
                        _DesignationNameOrdinal = i; 
                        break;
                    
                    case "HOURLYCHARGES":
                        _HourlyChargesOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<DesignationMaster> Implementation
        
        public bool Read()
        {
            _DesignationMaster = null; 
            return this.sqlDataReader.Read(); 
        }

        public DesignationMaster Current
        {
            get
            {
                if(_DesignationMaster == null)
                {
                    _DesignationMaster = new DesignationMaster();
                    if(_DsgIdOrdinal != -1)
                    {
                        _DesignationMaster.DsgId = SqlServerHelper.ToInt32(sqlDataReader, _DsgIdOrdinal); 
                    }
                    _DesignationMaster.id = SqlServerHelper.ToNullableInt32(sqlDataReader, _idOrdinal); 
                    _DesignationMaster.CompId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIdOrdinal); 
                    _DesignationMaster.DesignationName = SqlServerHelper.ToString(sqlDataReader, _DesignationNameOrdinal); 
                    _DesignationMaster.HourlyCharges = SqlServerHelper.ToNullableDouble(sqlDataReader, _HourlyChargesOrdinal); 
                }
                

                return _DesignationMaster; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<DesignationMaster> ToList()
        {
            List<DesignationMaster> list = new List<DesignationMaster>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<DesignationMaster> Implementation
        
        public IEnumerator<DesignationMaster> GetEnumerator()
        {
            return new DesignationMasterEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new DesignationMasterEnumerator(this); 
        }

        #endregion
        
        
        private partial class DesignationMasterEnumerator : IEnumerator<DesignationMaster>
        {
            private IReader<DesignationMaster> designationMasterReader;

            public DesignationMasterEnumerator(IReader<DesignationMaster> designationMasterReader)
            {
                this.designationMasterReader = designationMasterReader; 
            }

            #region IEnumerator<DesignationMaster> Members
            
            public DesignationMaster Current
            {
                get { return this.designationMasterReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.designationMasterReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.designationMasterReader.Current; }
            }

            public bool MoveNext()
            {
                return this.designationMasterReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of designationmaster reader is not supported."); 
            }

            #endregion
            
        }
    }
}
