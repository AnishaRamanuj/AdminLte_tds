// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;
using Microsoft.ApplicationBlocks1.Data;
using CommonLibrary;
using System.Configuration;


namespace JTMSProject
{
    public partial class JobMaster : CommonFunctions
    {
        private static IJobMasterPersister _DefaultPersister;
        private IJobMasterPersister _Persister;
        private int _JobId;
        private int _mJobId;
        private int? _CLTId;
        private int? _CompId;
        private string _JobName;
        private int? _JobGId;
        private DateTime? _CreationDate;
        private int? _StaffCode;
        private DateTime? _EndDate;
        private double? _BudHours;
        private decimal? _BudAMt;
        private double? _ActualHours;
        private decimal? _ActualAmt;
        private string _JobStatus;
        private DateTime? _ActualJobEndate;
        private int? _Billable;
        private decimal? _OtherBudAmt;
        private string _Staffid;
        private string _Approverid;
        private string _SAppid;

        static JobMaster()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerJobMasterPersister();
        }

        public JobMaster()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;
        }

        public JobMaster(int _JobId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign method parameter to private fields
            this._JobId = _JobId;

            // Call associated retrieve method
            Retrieve();
        }

        public JobMaster(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister;

            // Assign column values to private members
            for (int i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "JOBID":
                        this.JobId = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        break;

                    case "CLTID":
                        if (row.IsNull(i) == false)
                        {
                            this.CLTId = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "COMPID":
                        if (row.IsNull(i) == false)
                        {
                            this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "JOBNAME":
                        if (row.IsNull(i) == false)
                        {
                            this.JobName = (string)row[i, DataRowVersion.Current];
                        }
                        break;

                    case "JOBGID":
                        if (row.IsNull(i) == false)
                        {
                            this.JobGId = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "CREATIONDATE":
                        if (row.IsNull(i) == false)
                        {
                            this.CreationDate = Convert.ToDateTime(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "STAFFCODE":
                        if (row.IsNull(i) == false)
                        {
                            this.StaffCode = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "ENDDATE":
                        if (row.IsNull(i) == false)
                        {
                            this.EndDate = Convert.ToDateTime(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "BUDHOURS":
                        if (row.IsNull(i) == false)
                        {
                            this.BudHours = Convert.ToDouble(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "BUDAMT":
                        if (row.IsNull(i) == false)
                        {
                            this.BudAMt = Convert.ToDecimal(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "ACTUALHOURS":
                        if (row.IsNull(i) == false)
                        {
                            this.ActualHours = Convert.ToDouble(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "ACTUALAMT":
                        if (row.IsNull(i) == false)
                        {
                            this.ActualAmt = Convert.ToDecimal(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "JOBSTATUS":
                        if (row.IsNull(i) == false)
                        {
                            this.JobStatus = (string)row[i, DataRowVersion.Current];
                        }
                        break;

                    case "ACTUALJOBENDATE":
                        if (row.IsNull(i) == false)
                        {
                            this.ActualJobEndate = Convert.ToDateTime(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "BILLABLE":
                        if (row.IsNull(i) == false)
                        {
                            this.Billable = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;
                    case "mJOBID":
                        if (row.IsNull(i) == false)
                        {
                            this.mJobId = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        }
                        break;

                    case "StaffId":
                        if (row.IsNull(i) == false)
                        {
                            this.StaffId = (string)row[i, DataRowVersion.Current];
                        }
                        break;
                    case "ApprId":
                        if (row.IsNull(i) == false)
                        {
                            this.ApprId = (string)row[i, DataRowVersion.Current];
                        }
                        break;

                    case "SAprId":
                        if (row.IsNull(i) == false)
                        {
                            this.SAprId = (string)row[i, DataRowVersion.Current];
                        }
                        break;

                    case "OtherBudAmt":
                        if (row.IsNull(i) == false)
                        {
                            this.OtherBudAmt = Convert.ToDecimal(row[i, DataRowVersion.Current]);
                        }
                        break;
                }
            }
        }



        public static IJobMasterPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IJobMasterPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int JobId
        {
            get { return _JobId; }
            set { _JobId = value; }
        }

        public int mJobId
        {
            get { return _mJobId; }
            set { _mJobId = value; }
        }

        public string StaffId
        {
            get { return _Staffid; }
            set { _Staffid = value; }
        }

        public string ApprId
        {
            get { return _Approverid; }
            set { _Approverid = value; }
        }

        public string SAprId
        {
            get { return _SAppid; }
            set { _SAppid = value; }
        }


        public int? CLTId
        {
            get { return _CLTId; }
            set { _CLTId = value; }
        }

        public int? CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public string JobName
        {
            get { return _JobName; }
            set { _JobName = value; }
        }

        public int? JobGId
        {
            get { return _JobGId; }
            set { _JobGId = value; }
        }

        public DateTime? CreationDate
        {
            get { return _CreationDate; }
            set { _CreationDate = value; }
        }

        public int? StaffCode
        {
            get { return _StaffCode; }
            set { _StaffCode = value; }
        }

        public DateTime? EndDate
        {
            get { return _EndDate; }
            set { _EndDate = value; }
        }

        public double? BudHours
        {
            get { return _BudHours; }
            set { _BudHours = value; }
        }

        public decimal? BudAMt
        {
            get { return _BudAMt; }
            set { _BudAMt = value; }
        }

        public double? ActualHours
        {
            get { return _ActualHours; }
            set { _ActualHours = value; }
        }

        public decimal? ActualAmt
        {
            get { return _ActualAmt; }
            set { _ActualAmt = value; }
        }

        public string JobStatus
        {
            get { return _JobStatus; }
            set { _JobStatus = value; }
        }

        public DateTime? ActualJobEndate
        {
            get { return _ActualJobEndate; }
            set { _ActualJobEndate = value; }
        }

        public int? Billable
        {
            get { return _Billable; }
            set { _Billable = value; }
        }
        public decimal? OtherBudAmt
        {
            get { return _OtherBudAmt; }
            set { _OtherBudAmt = value; }
        }
        public virtual void Clone(JobMaster sourceObject)
        {
            // Clone attributes from source object
            this._JobId = sourceObject.JobId;
            this._mJobId = sourceObject.mJobId;
            this._Staffid = sourceObject.StaffId;
            this._Approverid = sourceObject.ApprId;
            this._SAppid = sourceObject.SAprId;
            this._CLTId = sourceObject.CLTId;
            this._CompId = sourceObject.CompId;
            this._JobName = sourceObject.JobName;
            this._JobGId = sourceObject.JobGId;
            this._CreationDate = sourceObject.CreationDate;
            this._StaffCode = sourceObject.StaffCode;
            this._EndDate = sourceObject.EndDate;
            this._BudHours = sourceObject.BudHours;
            this._BudAMt = sourceObject.BudAMt;
            this._ActualHours = sourceObject.ActualHours;
            this._ActualAmt = sourceObject.ActualAmt;
            this._JobStatus = sourceObject.JobStatus;
            this._ActualJobEndate = sourceObject.ActualJobEndate;
            this._Billable = sourceObject.Billable;
            this._OtherBudAmt = sourceObject.OtherBudAmt;
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this);
        }

        public virtual int Update()
        {
            return _Persister.Update(this);
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this);
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this);
        }

        public virtual int InsertMultipleJobs()
        {
            return _Persister.InsertMultipleJobs(this);
        }

        public static IReader<JobMaster> ListAll()
        {
            return _DefaultPersister.ListAll();
        }

        public static IReader<JobMaster> ListForCLTId(int? cLTId)
        {
            return _DefaultPersister.ListForCLTId(cLTId);
        }


        public SqlDataReader GetIenumrable_Edit_Approver(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[4];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                param[1] = new SqlParameter("@PageIndex", obj.pageIndex);
                param[2] = new SqlParameter("@PageSize", obj.pageNewSize);
                param[3] = new SqlParameter("@Jobid", obj.Jobid);

                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_eJob_Allocation_SApprover", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "SubApprover");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> SqlDR_GetIenumrable_Edit_Approver(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();

                using (SqlDataReader drrr = GetIenumrable_Edit_Approver(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            StaffCode = GetValue<int>(drrr["StaffCode"].ToString()),
                            DeptId = GetValue<int>(drrr["DepId"].ToString()),
                            StaffName = GetValue<string>(drrr["StaffName"].ToString()),
                            ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                            SuperAppId = GetValue<int>(drrr["SuperAppId"].ToString()),
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "SubApprover");
                return null;
            }
        }



        public SqlDataReader GetIenumrable_Edit_Staff(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[4];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                param[1] = new SqlParameter("@PageIndex", obj.pageIndex);
                param[2] = new SqlParameter("@PageSize", obj.pageNewSize);
                param[3] = new SqlParameter("@Jobid", obj.Jobid);
                //DataSet dsdsd = SqlHelper.ExecuteDataset(sqlConn, CommandType.StoredProcedure, "usp_eJob_Allocation_Staff", param);
                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_eJob_Allocation_Staff", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "StaffMaster");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> SqlDR_GetIenumrable_Edit_Staff(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();
                using (SqlDataReader drrr = GetIenumrable_Edit_Staff(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            StaffCode = GetValue<int>(drrr["StaffCode"].ToString()),
                            DeptId = GetValue<int>(drrr["DepId"].ToString()),
                            DepartmentName = GetValue<string>(drrr["DepartmentName"].ToString()),
                            JobGroupName = GetValue<string>(drrr["DesignationName"].ToString()),/////////////Designation Name
                            StaffName = GetValue<string>(drrr["StaffName"].ToString()),
                            ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                            BudgetAmount = GetValue<string>(drrr["BudgetAmount"].ToString()),
                            Budgethours = GetValue<string>(drrr["Budgethours"].ToString()),
                            ClientGroupName=GetValue<string>(drrr["PlanedDrawing"].ToString()),//////////planed Drawings
                            ClientName = GetValue<string>(drrr["AllocatedHours"].ToString()),//////////Allocated Hours
                            CreationDate = GetValue<string>(drrr["HourlyCharges"].ToString())//////////Hourly Charges                            
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "StaffMaster");
                return null;
            }
        }



        public SqlDataReader GetIenumrable_Edit_Dept(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[2];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                param[1] = new SqlParameter("@Jobid", obj.Jobid);

                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_eJob_Allocation_Dept", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "DeptMaster");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> SqlDR_GetIenumrable_Edit_Dept(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();

                using (SqlDataReader drrr = GetIenumrable_Edit_Dept(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            DeptId = GetValue<int>(drrr["DepId"].ToString()),
                            DepartmentName = GetValue<string>(drrr["DepartmentName"].ToString()),
                            ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "DeptMaster");
                return null;
            }
        }



        public SqlDataReader GetIenumrable_Add_Approver(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[3];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                param[1] = new SqlParameter("@PageIndex", obj.pageIndex);
                param[2] = new SqlParameter("@PageSize", obj.pageNewSize);
                //param[3] = new SqlParameter("@Jobid", obj.Jobid);

                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_AJob_Allocation_SApprover", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "SubApprover");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> SqlDR_GetIenumrable_Add_Approver(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();

                using (SqlDataReader drrr = GetIenumrable_Add_Approver(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            StaffCode = GetValue<int>(drrr["StaffCode"].ToString()),
                            DeptId = GetValue<int>(drrr["DepId"].ToString()),
                            StaffName = GetValue<string>(drrr["StaffName"].ToString()),
                            //ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "SubApprover");
                return null;
            }
        }



        public SqlDataReader GetIenumrable_Add_Dept(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[1];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                //param[1] = new SqlParameter("@Jobid", obj.Jobid);

                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_AJob_Allocation_Dept", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "DeptMaster");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> SqlDR_GetIenumrable_Add_Dept(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();

                using (SqlDataReader drrr = GetIenumrable_Add_Dept(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            DeptId = GetValue<int>(drrr["DepId"].ToString()),
                            DepartmentName = GetValue<string>(drrr["DepartmentName"].ToString()),
                            //ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "DeptMaster");
                return null;
            }
        }




        public SqlDataReader Add_mJob(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[2];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                param[1] = new SqlParameter("@Cltid", obj.Cltid);

                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_aJob_Allocation_mjob", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "mjobMaster");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> Get_Add_mJob(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();

                using (SqlDataReader drrr = Add_mJob(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            mJobID  = GetValue<int>(drrr["mjobid"].ToString()),
                            MJobName = GetValue<string>(drrr["mjobName"].ToString()),
                            //ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "mjobMaster");
                return null;
            }
        }


        public SqlDataReader GetIenumrable_Add_Staff(vw_JobnClientnStaff obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[3];
                param[0] = new SqlParameter("@CompanyID", obj.CompId);
                param[1] = new SqlParameter("@PageIndex", obj.pageIndex);
                param[2] = new SqlParameter("@PageSize", obj.pageNewSize);
                //param[3] = new SqlParameter("@Jobid", obj.Jobid);

                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_aJob_Allocation_Staff", param);
            }
            catch (Exception ex)
            {
                PrintError(ex, "StaffMaster");
                return null;
            }
        }

        public IEnumerable<vw_JobnClientnStaff> SqlDR_GetIenumrable_Add_Staff(vw_JobnClientnStaff obj)
        {
            try
            {
                List<vw_JobnClientnStaff> tbl = new List<vw_JobnClientnStaff>();

                using (SqlDataReader drrr = GetIenumrable_Add_Staff(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new vw_JobnClientnStaff()
                        {
                            StaffCode = GetValue<int>(drrr["StaffCode"].ToString()),
                            DeptId = GetValue<int>(drrr["DepId"].ToString()),
                            StaffName = GetValue<string>(drrr["StaffName"].ToString()),
                            DepartmentName = GetValue<string>(drrr["DepartmentName"].ToString()),
                            JobGroupName = GetValue<string>(drrr["DesignationName"].ToString()),/////////set Designation  Name
                            pageNewSize = GetValue<int>(drrr["HourlyCharges"].ToString())//////////////set hourly charges
                            //ischecked = GetValue<int>(drrr["ischecked"].ToString()),
                        });
                    }

                }
                return tbl as IEnumerable<vw_JobnClientnStaff>;
            }
            catch (Exception ex)
            {
                PrintError(ex, "StaffMaster");
                return null;
            }
        }



        public DataSet Get_JobAllocation(vw_JobnClientnStaff obj)
        {
            DataSet ds = new DataSet();
            SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
            SqlCommand cmd = new SqlCommand();
            SqlDataAdapter adap = new SqlDataAdapter();
            cmd.Connection = sqlConn;
            cmd.CommandText = "usp_Bind_JobAllocation";
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 999999999;


            cmd.Parameters.AddWithValue("@Compid", obj.CompId);
            cmd.Parameters.AddWithValue("@PageIndex", obj.pageIndex);
            cmd.Parameters.AddWithValue("@PageSize", obj.pageNewSize );
            cmd.Parameters.AddWithValue("@JobStatus", obj.jStatus );
            cmd.Parameters.AddWithValue("@Cname", obj.ClientName );
            cmd.Parameters.AddWithValue("@jname", obj.MJobName );
            adap.SelectCommand = cmd;
            adap.Fill(ds, "attc");

            return ds;
            //return SqlHelper.ExecuteDataset(sqlConn, CommandType.StoredProcedure, "usp_LastTimesheets", param);
        }


        //// Context Menu code 
        public SqlDataReader Sql_GetJobDetails(tbl_JobMaster obj)
        {
            try
            {
                SqlConnection sqlConn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ToString());
                SqlParameter[] param = new SqlParameter[2];
                param[0] = new SqlParameter("@Company_ID", obj.CompId);
                param[1] = new SqlParameter("@JobID", obj.Jobid);
                return SqlHelper.ExecuteReader(sqlConn, CommandType.StoredProcedure, "usp_Get_JobDetails", param);
            }
            catch (Exception ex)
            {
                //PrintError(ex, "ClientMaster");
                return null;

            }
        }

        public IEnumerable<tbl_JobMaster> JDetails(tbl_JobMaster obj)
        {
            try
            {
                CommonLibrary.CommonFunctions objComm = new CommonLibrary.CommonFunctions();
                List<tbl_JobMaster> tbl = new List<tbl_JobMaster>();
                using (SqlDataReader drrr = Sql_GetJobDetails(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new tbl_JobMaster()
                        {
                            JobStatus = objComm.GetValue<string>(drrr["JobStatus"].ToString()),
                            startDT = objComm.GetValue<string>(drrr["ST"].ToString()),
                            endDT = objComm.GetValue<string>(drrr["Ed"].ToString()),
                            bill = objComm.GetValue<int>(drrr["bill"].ToString()),
                            mJobName = objComm.GetValue<string>(drrr["mjobName"].ToString()),
                            ClientName = objComm.GetValue<string>(drrr["ClientName"].ToString()),
                        });
                    }
                }
                return tbl as IEnumerable<tbl_JobMaster>;
            }
            catch (Exception ex)
            {
                //PrintError(ex, "HourlyCharges");
                return null;
            }
        }



        public IEnumerable<tbl_JobMaster> JobBillable(tbl_JobMaster obj)
        {
            try
            {
                CommonLibrary.CommonFunctions objComm = new CommonLibrary.CommonFunctions();
                List<tbl_JobMaster> tbl = new List<tbl_JobMaster>();
                using (SqlDataReader drrr = Sql_GetJobDetails(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new tbl_JobMaster()
                        {
                            Billable  = objComm.GetValue<bool>(drrr["JDT"].ToString()),
                        });
                    }
                }
                return tbl as IEnumerable<tbl_JobMaster>;
            }
            catch (Exception ex)
            {
                
                return null;
            }
        }

        public IEnumerable<tbl_JobMaster> JobDate(tbl_JobMaster obj)
        {
            try
            {
                CommonLibrary.CommonFunctions objComm = new CommonLibrary.CommonFunctions();
                List<tbl_JobMaster> tbl = new List<tbl_JobMaster>();
                using (SqlDataReader drrr = Sql_GetJobDetails(obj))
                {
                    while (drrr.Read())
                    {
                        tbl.Add(new tbl_JobMaster()
                        {
                            startDT  = objComm.GetValue<string>(drrr["JDT"].ToString()),
                            endDT = objComm.GetValue<string>(drrr["JDT"].ToString()),
                        });
                    }
                }
                return tbl as IEnumerable<tbl_JobMaster>;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

    }

    public partial interface IJobMasterPersister
    {
        int Retrieve(JobMaster jobMaster);
        int Update(JobMaster jobMaster);
        int Delete(JobMaster jobMaster);
        int Insert(JobMaster jobMaster);
        int InsertMultipleJobs(JobMaster jobMaster);
        IReader<JobMaster> ListAll();
        IReader<JobMaster> ListForCLTId(int? cLTId);
    }

    public partial class SqlServerJobMasterPersister : SqlPersisterBase, IJobMasterPersister
    {
        public SqlServerJobMasterPersister()
        {
        }

        public SqlServerJobMasterPersister(string connectionString)
            : base(connectionString)
        {
        }

        public SqlServerJobMasterPersister(SqlConnection connection)
            : base(connection)
        {
        }

        public SqlServerJobMasterPersister(SqlTransaction transaction)
            : base(transaction)
        {
        }

        public int Retrieve(JobMaster jobMaster)
        {
            int __rowsAffected = 1;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobMasterGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                    vJobId.Direction = ParameterDirection.InputOutput;
                    sqlCommand.Parameters.Add(vJobId);
                    SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                    vCLTId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vCLTId);
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                    vJobName.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vJobName);
                    SqlParameter vJobGId = new SqlParameter("@JobGId", SqlDbType.Int);
                    vJobGId.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vJobGId);
                    SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                    vCreationDate.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vCreationDate);
                    SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                    vStaffCode.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vStaffCode);
                    ////SqlParameter vEndDate = new SqlParameter("@EndDate", SqlDbType.DateTime);
                    ////vEndDate.Direction = ParameterDirection.Output; 
                    ////sqlCommand.Parameters.Add(vEndDate);
                    SqlParameter vBudHours = new SqlParameter("@BudHours", SqlDbType.Float);
                    vBudHours.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vBudHours);
                    SqlParameter vBudAMt = new SqlParameter("@BudAMt", SqlDbType.Money);
                    vBudAMt.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vBudAMt);
                    SqlParameter vActualHours = new SqlParameter("@ActualHours", SqlDbType.Float);
                    vActualHours.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vActualHours);
                    SqlParameter vActualAmt = new SqlParameter("@ActualAmt", SqlDbType.Money);
                    vActualAmt.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vActualAmt);
                    SqlParameter vJobStatus = new SqlParameter("@JobStatus", SqlDbType.VarChar, 50);
                    vJobStatus.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vJobStatus);
                    SqlParameter vActualJobEndate = new SqlParameter("@ActualJobEndate", SqlDbType.DateTime);
                    vActualJobEndate.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vActualJobEndate);
                    SqlParameter vBillable = new SqlParameter("@Billable", SqlDbType.Int);
                    vBillable.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vBillable);
                    SqlParameter vmJobID = new SqlParameter("@mJobid", SqlDbType.Int);
                    vmJobID.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vmJobID);
                    SqlParameter vOtherBudAmt = new SqlParameter("@OtherBudAmt", SqlDbType.Money);
                    vOtherBudAmt.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vOtherBudAmt);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vJobId, jobMaster.JobId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        jobMaster.JobId = SqlServerHelper.ToInt32(vJobId);
                        jobMaster.CLTId = SqlServerHelper.ToNullableInt32(vCLTId);
                        jobMaster.CompId = SqlServerHelper.ToNullableInt32(vCompId);
                        jobMaster.JobName = SqlServerHelper.ToString(vJobName);
                        jobMaster.JobGId = SqlServerHelper.ToNullableInt32(vJobGId);
                        jobMaster.CreationDate = SqlServerHelper.ToNullableDateTime(vCreationDate);
                        jobMaster.StaffCode = SqlServerHelper.ToNullableInt32(vStaffCode);
                        ////jobMaster.EndDate = SqlServerHelper.ToNullableDateTime(vEndDate); 
                        jobMaster.BudHours = SqlServerHelper.ToNullableDouble(vBudHours);
                        jobMaster.BudAMt = SqlServerHelper.ToNullableDecimal(vBudAMt);
                        jobMaster.ActualHours = SqlServerHelper.ToNullableDouble(vActualHours);
                        jobMaster.ActualAmt = SqlServerHelper.ToNullableDecimal(vActualAmt);
                        jobMaster.JobStatus = SqlServerHelper.ToString(vJobStatus);
                        jobMaster.ActualJobEndate = SqlServerHelper.ToNullableDateTime(vActualJobEndate);
                        jobMaster.Billable = SqlServerHelper.ToNullableInt32(vBillable);
                        jobMaster.mJobId = SqlServerHelper.ToInt32(vmJobID);
                        jobMaster.OtherBudAmt = SqlServerHelper.ToNullableDecimal(vOtherBudAmt);
                    }
                    catch (Exception ex)
                    {
                        if (ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0;
                        }
                        else
                        {
                            throw ex;
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Update(JobMaster jobMaster)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobMasterUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                vJobName.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobName);
                SqlParameter vJobGId = new SqlParameter("@JobGId", SqlDbType.Int);
                vJobGId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobGId);
                SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                vCreationDate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCreationDate);
                SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                vStaffCode.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vStaffCode);
                ////SqlParameter vEndDate = new SqlParameter("@EndDate", SqlDbType.DateTime);
                ////vEndDate.Direction = ParameterDirection.Input; 
                ////sqlCommand.Parameters.Add(vEndDate);
                SqlParameter vBudHours = new SqlParameter("@BudHours", SqlDbType.Float);
                vBudHours.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBudHours);
                SqlParameter vBudAMt = new SqlParameter("@BudAMt", SqlDbType.Money);
                vBudAMt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBudAMt);
                SqlParameter vActualHours = new SqlParameter("@ActualHours", SqlDbType.Float);
                vActualHours.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualHours);
                SqlParameter vActualAmt = new SqlParameter("@ActualAmt", SqlDbType.Money);
                vActualAmt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualAmt);
                SqlParameter vJobStatus = new SqlParameter("@JobStatus", SqlDbType.VarChar, 50);
                vJobStatus.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobStatus);
                SqlParameter vActualJobEndate = new SqlParameter("@ActualJobEndate", SqlDbType.DateTime);
                vActualJobEndate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualJobEndate);
                SqlParameter vBillable = new SqlParameter("@Billable", SqlDbType.Int);
                vBillable.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBillable);
                SqlParameter vmJobID = new SqlParameter("@mJobID", SqlDbType.Int);
                vmJobID.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmJobID);
                SqlParameter vOtherBudAmt = new SqlParameter("@OtherBudAmt", SqlDbType.Money);
                vOtherBudAmt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vOtherBudAmt);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vJobId, jobMaster.JobId);
                SqlServerHelper.SetParameterValue(vCLTId, jobMaster.CLTId);
                SqlServerHelper.SetParameterValue(vCompId, jobMaster.CompId);
                SqlServerHelper.SetParameterValue(vJobName, jobMaster.JobName);
                SqlServerHelper.SetParameterValue(vJobGId, jobMaster.JobGId);
                SqlServerHelper.SetParameterValue(vCreationDate, jobMaster.CreationDate);
                SqlServerHelper.SetParameterValue(vStaffCode, jobMaster.StaffCode);
                ////SqlServerHelper.SetParameterValue(vEndDate, jobMaster.EndDate);
                SqlServerHelper.SetParameterValue(vBudHours, jobMaster.BudHours);
                SqlServerHelper.SetParameterValue(vBudAMt, jobMaster.BudAMt);
                SqlServerHelper.SetParameterValue(vActualHours, jobMaster.ActualHours);
                SqlServerHelper.SetParameterValue(vActualAmt, jobMaster.ActualAmt);
                SqlServerHelper.SetParameterValue(vJobStatus, jobMaster.JobStatus);
                SqlServerHelper.SetParameterValue(vActualJobEndate, jobMaster.ActualJobEndate);
                SqlServerHelper.SetParameterValue(vBillable, jobMaster.Billable);
                SqlServerHelper.SetParameterValue(vmJobID, jobMaster.mJobId);
                SqlServerHelper.SetParameterValue(vOtherBudAmt, jobMaster.OtherBudAmt);
                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Delete(JobMaster jobMaster)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobMasterDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                    vJobId.Direction = ParameterDirection.Input;
                    sqlCommand.Parameters.Add(vJobId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vJobId, jobMaster.JobId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public int Insert(JobMaster jobMaster)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.InputOutput;
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCompId);
                //SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                //vJobName.Direction = ParameterDirection.Input; 
                //sqlCommand.Parameters.Add(vJobName);
                SqlParameter vJobGId = new SqlParameter("@JobGId", SqlDbType.Int);
                vJobGId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobGId);
                SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                vCreationDate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCreationDate);
                SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                vStaffCode.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vStaffCode);
                SqlParameter vEndDate = new SqlParameter("@EndDate", SqlDbType.DateTime);
                vEndDate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vEndDate);
                SqlParameter vBudHours = new SqlParameter("@BudHours", SqlDbType.Float);
                vBudHours.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBudHours);
                SqlParameter vBudAMt = new SqlParameter("@BudAMt", SqlDbType.Money);
                vBudAMt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBudAMt);
                SqlParameter vActualHours = new SqlParameter("@ActualHours", SqlDbType.Float);
                vActualHours.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualHours);
                SqlParameter vActualAmt = new SqlParameter("@ActualAmt", SqlDbType.Money);
                vActualAmt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualAmt);
                SqlParameter vJobStatus = new SqlParameter("@JobStatus", SqlDbType.VarChar, 50);
                vJobStatus.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobStatus);
                SqlParameter vActualJobEndate = new SqlParameter("@ActualJobEndate", SqlDbType.DateTime);
                vActualJobEndate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualJobEndate);
                SqlParameter vBillable = new SqlParameter("@Billable", SqlDbType.Int);
                vBillable.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBillable);
                SqlParameter vmJobID = new SqlParameter("@mJobID", SqlDbType.Int);
                vmJobID.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmJobID);
                SqlParameter vOtherBudAmt = new SqlParameter("@OtherBudAmt", SqlDbType.Money);
                vOtherBudAmt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vOtherBudAmt);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vJobId,
                    jobMaster.JobId,
                    0);
                SqlServerHelper.SetParameterValue(vCLTId, jobMaster.CLTId);
                SqlServerHelper.SetParameterValue(vCompId, jobMaster.CompId);
                //SqlServerHelper.SetParameterValue(vJobName, jobMaster.JobName);
                SqlServerHelper.SetParameterValue(vJobGId, jobMaster.JobGId);
                SqlServerHelper.SetParameterValue(vCreationDate, jobMaster.CreationDate);
                SqlServerHelper.SetParameterValue(vStaffCode, jobMaster.StaffCode);
                SqlServerHelper.SetParameterValue(vEndDate, jobMaster.EndDate);
                SqlServerHelper.SetParameterValue(vBudHours, jobMaster.BudHours);
                SqlServerHelper.SetParameterValue(vBudAMt, jobMaster.BudAMt);
                SqlServerHelper.SetParameterValue(vActualHours, jobMaster.ActualHours);
                SqlServerHelper.SetParameterValue(vActualAmt, jobMaster.ActualAmt);
                SqlServerHelper.SetParameterValue(vJobStatus, jobMaster.JobStatus);
                SqlServerHelper.SetParameterValue(vActualJobEndate, jobMaster.ActualJobEndate);
                SqlServerHelper.SetParameterValue(vBillable, jobMaster.Billable);
                SqlServerHelper.SetParameterValue(vmJobID, jobMaster.mJobId);
                SqlServerHelper.SetParameterValue(vOtherBudAmt, jobMaster.OtherBudAmt);
                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                    // Get output parameter values
                    jobMaster.JobId = SqlServerHelper.ToInt32(vJobId);

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }


        public int InsertMultipleJobs(JobMaster jobMaster)
        {
            int __rowsAffected = 0;

            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("Multiple_JobMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.InputOutput;
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCompId);
                //SqlParameter vJobName = new SqlParameter("@JobName", SqlDbType.VarChar, 70);
                //vJobName.Direction = ParameterDirection.Input; 
                //sqlCommand.Parameters.Add(vJobName);
                SqlParameter vJobGId = new SqlParameter("@JobGId", SqlDbType.Int);
                vJobGId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobGId);
                SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                vCreationDate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCreationDate);
                SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                vStaffCode.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vStaffCode);
                SqlParameter vEndDate = new SqlParameter("@EndDate", SqlDbType.DateTime);
                vEndDate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vEndDate);
                SqlParameter vBudHours = new SqlParameter("@BudHours", SqlDbType.Float);
                vBudHours.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBudHours);
                SqlParameter vBudAMt = new SqlParameter("@BudAMt", SqlDbType.Money);
                vBudAMt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBudAMt);
                SqlParameter vActualHours = new SqlParameter("@ActualHours", SqlDbType.Float);
                vActualHours.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualHours);
                SqlParameter vActualAmt = new SqlParameter("@ActualAmt", SqlDbType.Money);
                vActualAmt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualAmt);
                SqlParameter vJobStatus = new SqlParameter("@JobStatus", SqlDbType.VarChar, 50);
                vJobStatus.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vJobStatus);
                SqlParameter vActualJobEndate = new SqlParameter("@ActualJobEndate", SqlDbType.DateTime);
                vActualJobEndate.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vActualJobEndate);
                SqlParameter vBillable = new SqlParameter("@Billable", SqlDbType.Int);
                vBillable.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vBillable);
                SqlParameter vmJobname = new SqlParameter("@mJobID", SqlDbType.VarChar, 550);
                vmJobname.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vmJobname);

                SqlParameter vstaffid = new SqlParameter("@stfID", SqlDbType.VarChar, 550);
                vstaffid.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vstaffid);
                
                SqlParameter vAprid = new SqlParameter("@AprID", SqlDbType.VarChar, 550);
                vAprid.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vAprid);

                SqlParameter vSPAprid = new SqlParameter("@SpAprID", SqlDbType.VarChar, 50);
                vSPAprid.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vSPAprid);
                
                SqlParameter vOtherBudAmt = new SqlParameter("@OtherBudAmt", SqlDbType.Money);
                vOtherBudAmt.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vOtherBudAmt);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vJobId,
                    jobMaster.JobId,
                    0);
                SqlServerHelper.SetParameterValue(vCLTId, jobMaster.CLTId);
                SqlServerHelper.SetParameterValue(vCompId, jobMaster.CompId);
                //SqlServerHelper.SetParameterValue(vJobName, jobMaster.JobName);
                SqlServerHelper.SetParameterValue(vJobGId, jobMaster.JobGId);
                SqlServerHelper.SetParameterValue(vCreationDate, jobMaster.CreationDate);
                SqlServerHelper.SetParameterValue(vStaffCode, jobMaster.StaffCode);
                SqlServerHelper.SetParameterValue(vEndDate, jobMaster.EndDate);
                SqlServerHelper.SetParameterValue(vBudHours, jobMaster.BudHours);
                SqlServerHelper.SetParameterValue(vBudAMt, jobMaster.BudAMt);
                SqlServerHelper.SetParameterValue(vActualHours, jobMaster.ActualHours);
                SqlServerHelper.SetParameterValue(vActualAmt, jobMaster.ActualAmt);
                SqlServerHelper.SetParameterValue(vJobStatus, jobMaster.JobStatus);
                SqlServerHelper.SetParameterValue(vActualJobEndate, jobMaster.ActualJobEndate);
                SqlServerHelper.SetParameterValue(vBillable, jobMaster.Billable);
                SqlServerHelper.SetParameterValue(vmJobname, jobMaster.JobName);

                SqlServerHelper.SetParameterValue(vstaffid, jobMaster.StaffId);
                SqlServerHelper.SetParameterValue(vAprid, jobMaster.ApprId);
                SqlServerHelper.SetParameterValue(vSPAprid, jobMaster.SAprId);

                SqlServerHelper.SetParameterValue(vOtherBudAmt, jobMaster.OtherBudAmt);
                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery();
                    if (__rowsAffected == 0)
                    {
                        return __rowsAffected;
                    }


                    // Get output parameter values
                    jobMaster.JobId = SqlServerHelper.ToInt32(vJobId);

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }

            return __rowsAffected;
        }

        public IReader<JobMaster> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobMasterListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerJobMasterReader(reader);
            }
        }

        public IReader<JobMaster> ListForCLTId(int? cLTId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("JobMasterListForCLTId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure;

                // Add command parameters
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vCLTId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vCLTId, cLTId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerJobMasterReader(reader);
            }
        }

    }

    public partial class SqlServerJobMasterReader : IReader<JobMaster>
    {
        private SqlDataReader sqlDataReader;

        private JobMaster _JobMaster;

        private int _JobIdOrdinal = -1;
        private int _CLTIdOrdinal = -1;
        private int _CompIdOrdinal = -1;
        private int _JobNameOrdinal = -1;
        private int _JobGIdOrdinal = -1;
        private int _CreationDateOrdinal = -1;
        private int _StaffCodeOrdinal = -1;
        private int _EndDateOrdinal = -1;
        private int _BudHoursOrdinal = -1;
        private int _BudAMtOrdinal = -1;
        private int _ActualHoursOrdinal = -1;
        private int _ActualAmtOrdinal = -1;
        private int _JobStatusOrdinal = -1;
        private int _ActualJobEndateOrdinal = -1;
        private int _BillableOrdinal = -1;
        private int _mJobIDOrdinal = -1;
        private int _StaffIDOrdinal = -1;
        private int _ApproverIDOrdinal = -1;
        private int _SAproverIDOrdinal = -1;
        private int _OtherBudAmt = -1;

        public SqlServerJobMasterReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader;
            for (int i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper();
                switch (columnName)
                {
                    case "JOBID":
                        _JobIdOrdinal = i;
                        break;

                    case "CLTID":
                        _CLTIdOrdinal = i;
                        break;

                    case "COMPID":
                        _CompIdOrdinal = i;
                        break;

                    case "JOBNAME":
                        _JobNameOrdinal = i;
                        break;

                    case "JOBGID":
                        _JobGIdOrdinal = i;
                        break;

                    case "CREATIONDATE":
                        _CreationDateOrdinal = i;
                        break;

                    case "STAFFCODE":
                        _StaffCodeOrdinal = i;
                        break;

                    case "ENDDATE":
                        _EndDateOrdinal = i;
                        break;

                    case "BUDHOURS":
                        _BudHoursOrdinal = i;
                        break;

                    case "BUDAMT":
                        _BudAMtOrdinal = i;
                        break;

                    case "ACTUALHOURS":
                        _ActualHoursOrdinal = i;
                        break;

                    case "ACTUALAMT":
                        _ActualAmtOrdinal = i;
                        break;

                    case "JOBSTATUS":
                        _JobStatusOrdinal = i;
                        break;

                    case "ACTUALJOBENDATE":
                        _ActualJobEndateOrdinal = i;
                        break;

                    case "BILLABLE":
                        _BillableOrdinal = i;
                        break;

                    case "mJOBID":
                        _mJobIDOrdinal = i;
                        break;

                    case "StaffID":
                        _StaffIDOrdinal = i;
                        break;

                    case "ApproverID":
                        _ApproverIDOrdinal = i;
                        break;

                    case "SAproverID":
                        _SAproverIDOrdinal = i;
                        break;

                    case "OtherBudAmt":
                        _OtherBudAmt = i;
                        break;

                }
            }
        }

        #region IReader<JobMaster> Implementation

        public bool Read()
        {
            _JobMaster = null;
            return this.sqlDataReader.Read();
        }

        public JobMaster Current
        {
            get
            {
                if (_JobMaster == null)
                {
                    _JobMaster = new JobMaster();
                    if (_JobIdOrdinal != -1)
                    {
                        _JobMaster.JobId = SqlServerHelper.ToInt32(sqlDataReader, _JobIdOrdinal);
                    }
                    _JobMaster.CLTId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CLTIdOrdinal);
                    _JobMaster.CompId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIdOrdinal);
                    _JobMaster.JobName = SqlServerHelper.ToString(sqlDataReader, _JobNameOrdinal);
                    _JobMaster.JobGId = SqlServerHelper.ToNullableInt32(sqlDataReader, _JobGIdOrdinal);
                    _JobMaster.CreationDate = SqlServerHelper.ToNullableDateTime(sqlDataReader, _CreationDateOrdinal);
                    _JobMaster.StaffCode = SqlServerHelper.ToNullableInt32(sqlDataReader, _StaffCodeOrdinal);
                    _JobMaster.EndDate = SqlServerHelper.ToNullableDateTime(sqlDataReader, _EndDateOrdinal);
                    _JobMaster.BudHours = SqlServerHelper.ToNullableDouble(sqlDataReader, _BudHoursOrdinal);
                    _JobMaster.BudAMt = SqlServerHelper.ToNullableDecimal(sqlDataReader, _BudAMtOrdinal);
                    _JobMaster.ActualHours = SqlServerHelper.ToNullableDouble(sqlDataReader, _ActualHoursOrdinal);
                    _JobMaster.ActualAmt = SqlServerHelper.ToNullableDecimal(sqlDataReader, _ActualAmtOrdinal);
                    _JobMaster.JobStatus = SqlServerHelper.ToString(sqlDataReader, _JobStatusOrdinal);
                    _JobMaster.ActualJobEndate = SqlServerHelper.ToNullableDateTime(sqlDataReader, _ActualJobEndateOrdinal);
                    _JobMaster.Billable = SqlServerHelper.ToNullableInt32(sqlDataReader, _BillableOrdinal);
                    _JobMaster.mJobId = SqlServerHelper.ToInt32(sqlDataReader, _mJobIDOrdinal);
                    _JobMaster.OtherBudAmt = SqlServerHelper.ToNullableDecimal(sqlDataReader, _OtherBudAmt);
                }


                return _JobMaster;
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<JobMaster> ToList()
        {
            List<JobMaster> list = new List<JobMaster>();
            while (this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list;
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable;
        }

        #endregion

        #region IDisposable Implementation

        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion

        #region IEnumerable<JobMaster> Implementation

        public IEnumerator<JobMaster> GetEnumerator()
        {
            return new JobMasterEnumerator(this);
        }

        #endregion

        #region IEnumerable Implementation

        IEnumerator IEnumerable.GetEnumerator()
        {
            return new JobMasterEnumerator(this);
        }

        #endregion


        private partial class JobMasterEnumerator : IEnumerator<JobMaster>
        {
            private IReader<JobMaster> jobMasterReader;

            public JobMasterEnumerator(IReader<JobMaster> jobMasterReader)
            {
                this.jobMasterReader = jobMasterReader;
            }

            #region IEnumerator<JobMaster> Members

            public JobMaster Current
            {
                get { return this.jobMasterReader.Current; }
            }

            #endregion

            #region IDisposable Members

            public void Dispose()
            {
                this.jobMasterReader.Dispose();
            }

            #endregion

            #region IEnumerator Members

            object IEnumerator.Current
            {
                get { return this.jobMasterReader.Current; }
            }

            public bool MoveNext()
            {
                return this.jobMasterReader.Read();
            }

            public void Reset()
            {
                throw new Exception("Reset of jobmaster reader is not supported.");
            }

            #endregion

        }

    }
}
