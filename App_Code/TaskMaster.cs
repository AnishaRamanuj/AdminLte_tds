// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace JTMSProject
{
    public partial class TaskMaster
    {
        private static ITaskMasterPersister _DefaultPersister;
        private ITaskMasterPersister _Persister;
        private int _TaskId;
        private string _TaskName;
        private int? _JobId;
        private int? _StaffCode;

        static TaskMaster()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerTaskMasterPersister();
        }

        public TaskMaster()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public TaskMaster(int _TaskId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._TaskId = _TaskId; 

            // Call associated retrieve method
            Retrieve();
        }

        public TaskMaster(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "TASKID":
                        this.TaskId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "TASKNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.TaskName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "JOBID":
                        if(row.IsNull(i) == false)
                        {
                            this.JobId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "STAFFCODE":
                        if(row.IsNull(i) == false)
                        {
                            this.StaffCode = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                }
            }
        }

        public static ITaskMasterPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public ITaskMasterPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int TaskId
        {
            get { return _TaskId; }
            set { _TaskId = value; }
        }

        public string TaskName
        {
            get { return _TaskName; }
            set { _TaskName = value; }
        }

        public int? JobId
        {
            get { return _JobId; }
            set { _JobId = value; }
        }

        public int? StaffCode
        {
            get { return _StaffCode; }
            set { _StaffCode = value; }
        }

        public virtual void Clone(TaskMaster sourceObject)
        {
            // Clone attributes from source object
            this._TaskId = sourceObject.TaskId; 
            this._TaskName = sourceObject.TaskName; 
            this._JobId = sourceObject.JobId; 
            this._StaffCode = sourceObject.StaffCode; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<TaskMaster> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface ITaskMasterPersister
    {
        int Retrieve(TaskMaster taskMaster);
        int Update(TaskMaster taskMaster);
        int Delete(TaskMaster taskMaster);
        int Insert(TaskMaster taskMaster);
        IReader<TaskMaster> ListAll();
    }
    
    public partial class SqlServerTaskMasterPersister : SqlPersisterBase, ITaskMasterPersister
    {
        public SqlServerTaskMasterPersister()
        {
        }

        public SqlServerTaskMasterPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerTaskMasterPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerTaskMasterPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(TaskMaster taskMaster)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("TaskMasterGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vTaskId = new SqlParameter("@TaskId", SqlDbType.Int);
                    vTaskId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vTaskId);
                    SqlParameter vTaskName = new SqlParameter("@TaskName", SqlDbType.VarChar, 50);
                    vTaskName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vTaskName);
                    SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                    vJobId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vJobId);
                    SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                    vStaffCode.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vStaffCode);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vTaskId, taskMaster.TaskId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        taskMaster.TaskId = SqlServerHelper.ToInt32(vTaskId); 
                        taskMaster.TaskName = SqlServerHelper.ToString(vTaskName); 
                        taskMaster.JobId = SqlServerHelper.ToNullableInt32(vJobId); 
                        taskMaster.StaffCode = SqlServerHelper.ToNullableInt32(vStaffCode); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(TaskMaster taskMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("TaskMasterUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vTaskId = new SqlParameter("@TaskId", SqlDbType.Int);
                vTaskId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vTaskId);
                SqlParameter vTaskName = new SqlParameter("@TaskName", SqlDbType.VarChar, 50);
                vTaskName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vTaskName);
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                vStaffCode.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStaffCode);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vTaskId, taskMaster.TaskId);
                SqlServerHelper.SetParameterValue(vTaskName, taskMaster.TaskName);
                SqlServerHelper.SetParameterValue(vJobId, taskMaster.JobId);
                SqlServerHelper.SetParameterValue(vStaffCode, taskMaster.StaffCode);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(TaskMaster taskMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("TaskMasterDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vTaskId = new SqlParameter("@TaskId", SqlDbType.Int);
                    vTaskId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vTaskId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vTaskId, taskMaster.TaskId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(TaskMaster taskMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("TaskMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vTaskId = new SqlParameter("@TaskId", SqlDbType.Int);
                vTaskId.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vTaskId);
                SqlParameter vTaskName = new SqlParameter("@TaskName", SqlDbType.VarChar, 50);
                vTaskName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vTaskName);
                SqlParameter vJobId = new SqlParameter("@JobId", SqlDbType.Int);
                vJobId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vJobId);
                SqlParameter vStaffCode = new SqlParameter("@StaffCode", SqlDbType.Int);
                vStaffCode.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStaffCode);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vTaskId, 
                    taskMaster.TaskId, 
                    0);
                SqlServerHelper.SetParameterValue(vTaskName, taskMaster.TaskName);
                SqlServerHelper.SetParameterValue(vJobId, taskMaster.JobId);
                SqlServerHelper.SetParameterValue(vStaffCode, taskMaster.StaffCode);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    taskMaster.TaskId = SqlServerHelper.ToInt32(vTaskId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<TaskMaster> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("TaskMasterListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerTaskMasterReader(reader); 
            }
        }

    }

    public partial class SqlServerTaskMasterReader : IReader<TaskMaster>
    {
        private SqlDataReader sqlDataReader;

        private TaskMaster _TaskMaster;

        private int _TaskIdOrdinal = -1;
        private int _TaskNameOrdinal = -1;
        private int _JobIdOrdinal = -1;
        private int _StaffCodeOrdinal = -1;

        public SqlServerTaskMasterReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "TASKID":
                        _TaskIdOrdinal = i; 
                        break;
                    
                    case "TASKNAME":
                        _TaskNameOrdinal = i; 
                        break;
                    
                    case "JOBID":
                        _JobIdOrdinal = i; 
                        break;
                    
                    case "STAFFCODE":
                        _StaffCodeOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<TaskMaster> Implementation
        
        public bool Read()
        {
            _TaskMaster = null; 
            return this.sqlDataReader.Read(); 
        }

        public TaskMaster Current
        {
            get
            {
                if(_TaskMaster == null)
                {
                    _TaskMaster = new TaskMaster();
                    if(_TaskIdOrdinal != -1)
                    {
                        _TaskMaster.TaskId = SqlServerHelper.ToInt32(sqlDataReader, _TaskIdOrdinal); 
                    }
                    _TaskMaster.TaskName = SqlServerHelper.ToString(sqlDataReader, _TaskNameOrdinal); 
                    _TaskMaster.JobId = SqlServerHelper.ToNullableInt32(sqlDataReader, _JobIdOrdinal); 
                    _TaskMaster.StaffCode = SqlServerHelper.ToNullableInt32(sqlDataReader, _StaffCodeOrdinal); 
                }
                

                return _TaskMaster; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<TaskMaster> ToList()
        {
            List<TaskMaster> list = new List<TaskMaster>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<TaskMaster> Implementation
        
        public IEnumerator<TaskMaster> GetEnumerator()
        {
            return new TaskMasterEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new TaskMasterEnumerator(this); 
        }

        #endregion
        
        
        private partial class TaskMasterEnumerator : IEnumerator<TaskMaster>
        {
            private IReader<TaskMaster> taskMasterReader;

            public TaskMasterEnumerator(IReader<TaskMaster> taskMasterReader)
            {
                this.taskMasterReader = taskMasterReader; 
            }

            #region IEnumerator<TaskMaster> Members
            
            public TaskMaster Current
            {
                get { return this.taskMasterReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.taskMasterReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.taskMasterReader.Current; }
            }

            public bool MoveNext()
            {
                return this.taskMasterReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of taskmaster reader is not supported."); 
            }

            #endregion
            
        }
    }
}
