// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace JTMSProject
{
    public partial class ClientMaster
    {
        private static IClientMasterPersister _DefaultPersister;
        private IClientMasterPersister _Persister;
        private int _CLTId;
        private int? _CompId;
        private string _ClientCode;
        private string _ClientName;
        private string _Address1;
        private string _Address2;
        private string _Address3;
        private string _City;
        private string _Pin;
        private string _Country;
        private string _BusPhone;
        private string _BusFax;
        private string _Website;
        private string _ContPerson;
        private string _ContMob;
        private string _ContEmail;
        private int? _CTGId;
        private DateTime? _CreationDate;
        private string _Partner;
        private string _username;
        private string _password;
        private string _Role;
        private bool? _IsApproved;
        private Guid? _UserId;

        static ClientMaster()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerClientMasterPersister();
        }

        public ClientMaster()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public ClientMaster(int _CLTId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._CLTId = _CLTId; 

            // Call associated retrieve method
            Retrieve();
        }

        public ClientMaster(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "CLTID":
                        this.CLTId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "COMPID":
                        if(row.IsNull(i) == false)
                        {
                            this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "CLIENTNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.ClientName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ClientCode":
                        if(row.IsNull(i) == false)
                        {
                            this.ClientCode = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    case "ADDRESS1":
                        if(row.IsNull(i) == false)
                        {
                            this.Address1 = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ADDRESS2":
                        if(row.IsNull(i) == false)
                        {
                            this.Address2 = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ADDRESS3":
                        if(row.IsNull(i) == false)
                        {
                            this.Address3 = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CITY":
                        if(row.IsNull(i) == false)
                        {
                            this.City = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PIN":
                        if(row.IsNull(i) == false)
                        {
                            this.Pin = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "COUNTRY":
                        if(row.IsNull(i) == false)
                        {
                            this.Country = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "BUSPHONE":
                        if(row.IsNull(i) == false)
                        {
                            this.BusPhone = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "BUSFAX":
                        if(row.IsNull(i) == false)
                        {
                            this.BusFax = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "WEBSITE":
                        if(row.IsNull(i) == false)
                        {
                            this.Website = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CONTPERSON":
                        if(row.IsNull(i) == false)
                        {
                            this.ContPerson = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CONTMOB":
                        if(row.IsNull(i) == false)
                        {
                            this.ContMob = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CONTEMAIL":
                        if(row.IsNull(i) == false)
                        {
                            this.ContEmail = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CTGID":
                        if(row.IsNull(i) == false)
                        {
                            this.CTGId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "CREATIONDATE":
                        if(row.IsNull(i) == false)
                        {
                            this.CreationDate = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PARTNER":
                        if(row.IsNull(i) == false)
                        {
                            this.Partner = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "USERNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.username = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "PASSWORD":
                        if(row.IsNull(i) == false)
                        {
                            this.password = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ROLE":
                        if(row.IsNull(i) == false)
                        {
                            this.Role = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "ISAPPROVED":
                        if(row.IsNull(i) == false)
                        {
                            this.IsApproved = Convert.ToBoolean(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "USERID":
                        if(row.IsNull(i) == false)
                        {
                            if(row[i, DataRowVersion.Current] is Guid)
                            {
                                this.UserId = (Guid)row[i, DataRowVersion.Current]; 
                            }
                            else
                            {
                                this.UserId = new Guid((Byte[])row[i, DataRowVersion.Current]); 
                            }
                        }
                        break;
                    
                }
            }
        }

        public static IClientMasterPersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IClientMasterPersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int CLTId
        {
            get { return _CLTId; }
            set { _CLTId = value; }
        }

        public int? CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public string ClientName
        {
            get { return _ClientName; }
            set { _ClientName = value; }
        }
        
        public string ClientCode
        {
            get { return _ClientCode; }
            set { _ClientCode = value; }
        }

        public string Address1
        {
            get { return _Address1; }
            set { _Address1 = value; }
        }

        public string Address2
        {
            get { return _Address2; }
            set { _Address2 = value; }
        }

        public string Address3
        {
            get { return _Address3; }
            set { _Address3 = value; }
        }

        public string City
        {
            get { return _City; }
            set { _City = value; }
        }

        public string Pin
        {
            get { return _Pin; }
            set { _Pin = value; }
        }

        public string Country
        {
            get { return _Country; }
            set { _Country = value; }
        }

        public string BusPhone
        {
            get { return _BusPhone; }
            set { _BusPhone = value; }
        }

        public string BusFax
        {
            get { return _BusFax; }
            set { _BusFax = value; }
        }

        public string Website
        {
            get { return _Website; }
            set { _Website = value; }
        }

        public string ContPerson
        {
            get { return _ContPerson; }
            set { _ContPerson = value; }
        }

        public string ContMob
        {
            get { return _ContMob; }
            set { _ContMob = value; }
        }

        public string ContEmail
        {
            get { return _ContEmail; }
            set { _ContEmail = value; }
        }

        public int? CTGId
        {
            get { return _CTGId; }
            set { _CTGId = value; }
        }

        public DateTime? CreationDate
        {
            get { return _CreationDate; }
            set { _CreationDate = value; }
        }

        public string Partner
        {
            get { return _Partner; }
            set { _Partner = value; }
        }

        public string username
        {
            get { return _username; }
            set { _username = value; }
        }

        public string password
        {
            get { return _password; }
            set { _password = value; }
        }

        public string Role
        {
            get { return _Role; }
            set { _Role = value; }
        }

        public bool? IsApproved
        {
            get { return _IsApproved; }
            set { _IsApproved = value; }
        }

        public Guid? UserId
        {
            get { return _UserId; }
            set { _UserId = value; }
        }

        public virtual void Clone(ClientMaster sourceObject)
        {
            // Clone attributes from source object
            this._CLTId = sourceObject.CLTId; 
            this._CompId = sourceObject.CompId; 
            this._ClientName = sourceObject.ClientName;

            this._ClientCode = sourceObject.ClientCode; 
            this._Address1 = sourceObject.Address1; 
            this._Address2 = sourceObject.Address2; 
            this._Address3 = sourceObject.Address3; 
            this._City = sourceObject.City; 
            this._Pin = sourceObject.Pin; 
            this._Country = sourceObject.Country; 
            this._BusPhone = sourceObject.BusPhone; 
            this._BusFax = sourceObject.BusFax; 
            this._Website = sourceObject.Website; 
            this._ContPerson = sourceObject.ContPerson; 
            this._ContMob = sourceObject.ContMob; 
            this._ContEmail = sourceObject.ContEmail; 
            this._CTGId = sourceObject.CTGId; 
            this._CreationDate = sourceObject.CreationDate; 
            this._Partner = sourceObject.Partner; 
            this._username = sourceObject.username; 
            this._password = sourceObject.password; 
            this._Role = sourceObject.Role; 
            this._IsApproved = sourceObject.IsApproved; 
            this._UserId = sourceObject.UserId; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<ClientMaster> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

        public static IReader<ClientMaster> ListForCompId(int? compId)
        {
            return _DefaultPersister.ListForCompId(compId); 
        }

    }
    
    public partial interface IClientMasterPersister
    {
        int Retrieve(ClientMaster clientMaster);
        int Update(ClientMaster clientMaster);
        int Delete(ClientMaster clientMaster);
        int Insert(ClientMaster clientMaster);
        IReader<ClientMaster> ListAll();
        IReader<ClientMaster> ListForCompId(int? compId);
    }
    
    public partial class SqlServerClientMasterPersister : SqlPersisterBase, IClientMasterPersister
    {
        public SqlServerClientMasterPersister()
        {
        }

        public SqlServerClientMasterPersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerClientMasterPersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerClientMasterPersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(ClientMaster clientMaster)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("ClientMasterGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                    vCLTId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vCLTId);
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vClientName = new SqlParameter("@ClientName", SqlDbType.VarChar, 500);
                    vClientName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vClientName);

                    SqlParameter vClientCode = new SqlParameter("@ClientCode", SqlDbType.VarChar, 70);
                    vClientName.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vClientCode);
                    SqlParameter vAddress1 = new SqlParameter("@Address1", SqlDbType.VarChar, 70);
                    vAddress1.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vAddress1);
                    SqlParameter vAddress2 = new SqlParameter("@Address2", SqlDbType.VarChar, 70);
                    vAddress2.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vAddress2);
                    SqlParameter vAddress3 = new SqlParameter("@Address3", SqlDbType.VarChar, 70);
                    vAddress3.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vAddress3);
                    SqlParameter vCity = new SqlParameter("@City", SqlDbType.VarChar, 70);
                    vCity.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCity);
                    SqlParameter vPin = new SqlParameter("@Pin", SqlDbType.VarChar, 10);
                    vPin.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPin);
                    SqlParameter vCountry = new SqlParameter("@Country", SqlDbType.VarChar, 70);
                    vCountry.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCountry);
                    SqlParameter vBusPhone = new SqlParameter("@BusPhone", SqlDbType.VarChar, 50);
                    vBusPhone.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vBusPhone);
                    SqlParameter vBusFax = new SqlParameter("@BusFax", SqlDbType.VarChar, 50);
                    vBusFax.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vBusFax);
                    SqlParameter vWebsite = new SqlParameter("@Website", SqlDbType.VarChar, 70);
                    vWebsite.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vWebsite);
                    SqlParameter vContPerson = new SqlParameter("@ContPerson", SqlDbType.VarChar, 70);
                    vContPerson.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vContPerson);
                    SqlParameter vContMob = new SqlParameter("@ContMob", SqlDbType.VarChar, 50);
                    vContMob.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vContMob);
                    SqlParameter vContEmail = new SqlParameter("@ContEmail", SqlDbType.VarChar, 70);
                    vContEmail.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vContEmail);
                    SqlParameter vCTGId = new SqlParameter("@CTGId", SqlDbType.Int);
                    vCTGId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCTGId);
                    SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                    vCreationDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCreationDate);
                    SqlParameter vPartner = new SqlParameter("@Partner", SqlDbType.VarChar, 70);
                    vPartner.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPartner);
                    SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 70);
                    vusername.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vusername);
                    SqlParameter vpassword = new SqlParameter("@password", SqlDbType.VarChar, 70);
                    vpassword.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vpassword);
                    SqlParameter vRole = new SqlParameter("@Role", SqlDbType.NVarChar, 256);
                    vRole.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vRole);
                    SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                    vIsApproved.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vIsApproved);
                    SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                    vUserId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vUserId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vCLTId, clientMaster.CLTId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        clientMaster.CLTId = SqlServerHelper.ToInt32(vCLTId); 
                        clientMaster.CompId = SqlServerHelper.ToNullableInt32(vCompId); 
                        clientMaster.ClientName = SqlServerHelper.ToString(vClientName);
                        clientMaster.ClientCode = SqlServerHelper.ToString(vClientCode);
                        clientMaster.Address1 = SqlServerHelper.ToString(vAddress1); 
                        clientMaster.Address2 = SqlServerHelper.ToString(vAddress2); 
                        clientMaster.Address3 = SqlServerHelper.ToString(vAddress3); 
                        clientMaster.City = SqlServerHelper.ToString(vCity); 
                        clientMaster.Pin = SqlServerHelper.ToString(vPin); 
                        clientMaster.Country = SqlServerHelper.ToString(vCountry); 
                        clientMaster.BusPhone = SqlServerHelper.ToString(vBusPhone); 
                        clientMaster.BusFax = SqlServerHelper.ToString(vBusFax); 
                        clientMaster.Website = SqlServerHelper.ToString(vWebsite); 
                        clientMaster.ContPerson = SqlServerHelper.ToString(vContPerson); 
                        clientMaster.ContMob = SqlServerHelper.ToString(vContMob); 
                        clientMaster.ContEmail = SqlServerHelper.ToString(vContEmail); 
                        clientMaster.CTGId = SqlServerHelper.ToNullableInt32(vCTGId); 
                        clientMaster.CreationDate = SqlServerHelper.ToNullableDateTime(vCreationDate); 
                        clientMaster.Partner = SqlServerHelper.ToString(vPartner); 
                        clientMaster.username = SqlServerHelper.ToString(vusername); 
                        clientMaster.password = SqlServerHelper.ToString(vpassword); 
                        clientMaster.Role = SqlServerHelper.ToString(vRole); 
                        clientMaster.IsApproved = SqlServerHelper.ToNullableBoolean(vIsApproved); 
                        clientMaster.UserId = SqlServerHelper.ToNullableGuid(vUserId); 

                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(ClientMaster clientMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("ClientMasterUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vClientName = new SqlParameter("@ClientName", SqlDbType.VarChar,500);
                vClientName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vClientName);
                SqlParameter vClientCode = new SqlParameter("@ClientCode", SqlDbType.VarChar, 70);
                vClientName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vClientCode);
                SqlParameter vAddress1 = new SqlParameter("@Address1", SqlDbType.VarChar, 70);
                vAddress1.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress1);
                SqlParameter vAddress2 = new SqlParameter("@Address2", SqlDbType.VarChar, 70);
                vAddress2.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress2);
                SqlParameter vAddress3 = new SqlParameter("@Address3", SqlDbType.VarChar, 70);
                vAddress3.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress3);
                SqlParameter vCity = new SqlParameter("@City", SqlDbType.VarChar, 70);
                vCity.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCity);
                SqlParameter vPin = new SqlParameter("@Pin", SqlDbType.VarChar, 10);
                vPin.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPin);
                SqlParameter vCountry = new SqlParameter("@Country", SqlDbType.VarChar, 70);
                vCountry.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCountry);
                SqlParameter vBusPhone = new SqlParameter("@BusPhone", SqlDbType.VarChar, 50);
                vBusPhone.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vBusPhone);
                SqlParameter vBusFax = new SqlParameter("@BusFax", SqlDbType.VarChar, 50);
                vBusFax.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vBusFax);
                SqlParameter vWebsite = new SqlParameter("@Website", SqlDbType.VarChar, 70);
                vWebsite.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vWebsite);
                SqlParameter vContPerson = new SqlParameter("@ContPerson", SqlDbType.VarChar, 70);
                vContPerson.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vContPerson);
                SqlParameter vContMob = new SqlParameter("@ContMob", SqlDbType.VarChar, 50);
                vContMob.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vContMob);
                SqlParameter vContEmail = new SqlParameter("@ContEmail", SqlDbType.VarChar, 70);
                vContEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vContEmail);
                SqlParameter vCTGId = new SqlParameter("@CTGId", SqlDbType.Int);
                vCTGId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCTGId);
                SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                vCreationDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCreationDate);
                SqlParameter vPartner = new SqlParameter("@Partner", SqlDbType.VarChar, 70);
                vPartner.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPartner);
                SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 70);
                vusername.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vusername);
                SqlParameter vpassword = new SqlParameter("@password", SqlDbType.VarChar, 70);
                vpassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vpassword);
                SqlParameter vRole = new SqlParameter("@Role", SqlDbType.NVarChar, 256);
                vRole.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vRole);
                SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                vIsApproved.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsApproved);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(vCLTId, clientMaster.CLTId);
                SqlServerHelper.SetParameterValue(vCompId, clientMaster.CompId);
                SqlServerHelper.SetParameterValue(vClientName, clientMaster.ClientName);
                SqlServerHelper.SetParameterValue(vClientCode, clientMaster.ClientCode);
                SqlServerHelper.SetParameterValue(vAddress1, clientMaster.Address1);
                SqlServerHelper.SetParameterValue(vAddress2, clientMaster.Address2);
                SqlServerHelper.SetParameterValue(vAddress3, clientMaster.Address3);
                SqlServerHelper.SetParameterValue(vCity, clientMaster.City);
                SqlServerHelper.SetParameterValue(vPin, clientMaster.Pin);
                SqlServerHelper.SetParameterValue(vCountry, clientMaster.Country);
                SqlServerHelper.SetParameterValue(vBusPhone, clientMaster.BusPhone);
                SqlServerHelper.SetParameterValue(vBusFax, clientMaster.BusFax);
                SqlServerHelper.SetParameterValue(vWebsite, clientMaster.Website);
                SqlServerHelper.SetParameterValue(vContPerson, clientMaster.ContPerson);
                SqlServerHelper.SetParameterValue(vContMob, clientMaster.ContMob);
                SqlServerHelper.SetParameterValue(vContEmail, clientMaster.ContEmail);
                SqlServerHelper.SetParameterValue(vCTGId, clientMaster.CTGId);
                SqlServerHelper.SetParameterValue(vCreationDate, clientMaster.CreationDate);
                SqlServerHelper.SetParameterValue(vPartner, clientMaster.Partner);
                SqlServerHelper.SetParameterValue(vusername, clientMaster.username);
                SqlServerHelper.SetParameterValue(vpassword, clientMaster.password);
                SqlServerHelper.SetParameterValue(vRole, clientMaster.Role);
                SqlServerHelper.SetParameterValue(vIsApproved, clientMaster.IsApproved);
                SqlServerHelper.SetParameterValue(vUserId, clientMaster.UserId);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(ClientMaster clientMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("ClientMasterDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                    vCLTId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vCLTId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vCLTId, clientMaster.CLTId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(ClientMaster clientMaster)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("ClientMasterInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.Int);
                vCLTId.Direction = ParameterDirection.InputOutput; 
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vClientName = new SqlParameter("@ClientName", SqlDbType.VarChar, 250);
                vClientName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vClientName);
                
                SqlParameter vClientCode = new SqlParameter("@ClientCode", SqlDbType.VarChar, 70);
                vClientName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vClientCode);
                SqlParameter vAddress1 = new SqlParameter("@Address1", SqlDbType.VarChar, 70);
                vAddress1.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress1);
                SqlParameter vAddress2 = new SqlParameter("@Address2", SqlDbType.VarChar, 70);
                vAddress2.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress2);
                SqlParameter vAddress3 = new SqlParameter("@Address3", SqlDbType.VarChar, 70);
                vAddress3.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vAddress3);
                SqlParameter vCity = new SqlParameter("@City", SqlDbType.VarChar, 70);
                vCity.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCity);
                SqlParameter vPin = new SqlParameter("@Pin", SqlDbType.VarChar, 10);
                vPin.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPin);
                SqlParameter vCountry = new SqlParameter("@Country", SqlDbType.VarChar, 70);
                vCountry.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCountry);
                SqlParameter vBusPhone = new SqlParameter("@BusPhone", SqlDbType.VarChar, 50);
                vBusPhone.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vBusPhone);
                SqlParameter vBusFax = new SqlParameter("@BusFax", SqlDbType.VarChar, 50);
                vBusFax.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vBusFax);
                SqlParameter vWebsite = new SqlParameter("@Website", SqlDbType.VarChar, 70);
                vWebsite.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vWebsite);
                SqlParameter vContPerson = new SqlParameter("@ContPerson", SqlDbType.VarChar, 70);
                vContPerson.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vContPerson);
                SqlParameter vContMob = new SqlParameter("@ContMob", SqlDbType.VarChar, 50);
                vContMob.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vContMob);
                SqlParameter vContEmail = new SqlParameter("@ContEmail", SqlDbType.VarChar, 70);
                vContEmail.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vContEmail);
                SqlParameter vCTGId = new SqlParameter("@CTGId", SqlDbType.Int);
                vCTGId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCTGId);
                SqlParameter vCreationDate = new SqlParameter("@CreationDate", SqlDbType.DateTime);
                vCreationDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCreationDate);
                SqlParameter vPartner = new SqlParameter("@Partner", SqlDbType.VarChar, 70);
                vPartner.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPartner);
                SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 70);
                vusername.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vusername);
                SqlParameter vpassword = new SqlParameter("@password", SqlDbType.VarChar, 70);
                vpassword.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vpassword);
                SqlParameter vRole = new SqlParameter("@Role", SqlDbType.NVarChar, 256);
                vRole.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vRole);
                SqlParameter vIsApproved = new SqlParameter("@IsApproved", SqlDbType.Bit);
                vIsApproved.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vIsApproved);
                SqlParameter vUserId = new SqlParameter("@UserId", SqlDbType.UniqueIdentifier);
                vUserId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vUserId);

                // Set input parameter values
                SqlServerHelper.SetParameterValue(
                    vCLTId, 
                    clientMaster.CLTId, 
                    0);
                SqlServerHelper.SetParameterValue(vCompId, clientMaster.CompId);
                SqlServerHelper.SetParameterValue(vClientName, clientMaster.ClientName);
                SqlServerHelper.SetParameterValue(vClientCode, clientMaster.ClientCode);
                SqlServerHelper.SetParameterValue(vAddress1, clientMaster.Address1);
                SqlServerHelper.SetParameterValue(vAddress2, clientMaster.Address2);
                SqlServerHelper.SetParameterValue(vAddress3, clientMaster.Address3);
                SqlServerHelper.SetParameterValue(vCity, clientMaster.City);
                SqlServerHelper.SetParameterValue(vPin, clientMaster.Pin);
                SqlServerHelper.SetParameterValue(vCountry, clientMaster.Country);
                SqlServerHelper.SetParameterValue(vBusPhone, clientMaster.BusPhone);
                SqlServerHelper.SetParameterValue(vBusFax, clientMaster.BusFax);
                SqlServerHelper.SetParameterValue(vWebsite, clientMaster.Website);
                SqlServerHelper.SetParameterValue(vContPerson, clientMaster.ContPerson);
                SqlServerHelper.SetParameterValue(vContMob, clientMaster.ContMob);
                SqlServerHelper.SetParameterValue(vContEmail, clientMaster.ContEmail);
                SqlServerHelper.SetParameterValue(vCTGId, clientMaster.CTGId);
                SqlServerHelper.SetParameterValue(vCreationDate, clientMaster.CreationDate);
                SqlServerHelper.SetParameterValue(vPartner, clientMaster.Partner);
                SqlServerHelper.SetParameterValue(vusername, clientMaster.username);
                SqlServerHelper.SetParameterValue(vpassword, clientMaster.password);
                SqlServerHelper.SetParameterValue(vRole, clientMaster.Role);
                SqlServerHelper.SetParameterValue(vIsApproved, clientMaster.IsApproved);
                SqlServerHelper.SetParameterValue(vUserId, clientMaster.UserId);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    clientMaster.CLTId = SqlServerHelper.ToInt32(vCLTId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<ClientMaster> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("ClientMasterListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerClientMasterReader(reader); 
            }
        }

        public IReader<ClientMaster> ListForCompId(int? compId)
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("ClientMasterListForCompId"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                
                // Set input parameter values
                SqlServerHelper.SetParameterValue(vCompId, compId);

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerClientMasterReader(reader); 
            }
        }

    }

    public partial class SqlServerClientMasterReader : IReader<ClientMaster>
    {
        private SqlDataReader sqlDataReader;

        private ClientMaster _ClientMaster;

        private int _CLTIdOrdinal = -1;
        private int _CompIdOrdinal = -1;
        private int _ClientNameOrdinal = -1;

        private int _ClientCodeOrdinal = -1;
        private int _Address1Ordinal = -1;
        private int _Address2Ordinal = -1;
        private int _Address3Ordinal = -1;
        private int _CityOrdinal = -1;
        private int _PinOrdinal = -1;
        private int _CountryOrdinal = -1;
        private int _BusPhoneOrdinal = -1;
        private int _BusFaxOrdinal = -1;
        private int _WebsiteOrdinal = -1;
        private int _ContPersonOrdinal = -1;
        private int _ContMobOrdinal = -1;
        private int _ContEmailOrdinal = -1;
        private int _CTGIdOrdinal = -1;
        private int _CreationDateOrdinal = -1;
        private int _PartnerOrdinal = -1;
        private int _usernameOrdinal = -1;
        private int _passwordOrdinal = -1;
        private int _RoleOrdinal = -1;
        private int _IsApprovedOrdinal = -1;
        private int _UserIdOrdinal = -1;

        public SqlServerClientMasterReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "CLTID":
                        _CLTIdOrdinal = i; 
                        break;
                    
                    case "COMPID":
                        _CompIdOrdinal = i; 
                        break;
                    
                    case "CLIENTNAME":
                        _ClientNameOrdinal = i; 
                        break;

                    case "ClientCode":
                        _ClientCodeOrdinal = i; 
                        break;
                    case "ADDRESS1":
                        _Address1Ordinal = i; 
                        break;
                    
                    case "ADDRESS2":
                        _Address2Ordinal = i; 
                        break;
                    
                    case "ADDRESS3":
                        _Address3Ordinal = i; 
                        break;
                    
                    case "CITY":
                        _CityOrdinal = i; 
                        break;
                    
                    case "PIN":
                        _PinOrdinal = i; 
                        break;
                    
                    case "COUNTRY":
                        _CountryOrdinal = i; 
                        break;
                    
                    case "BUSPHONE":
                        _BusPhoneOrdinal = i; 
                        break;
                    
                    case "BUSFAX":
                        _BusFaxOrdinal = i; 
                        break;
                    
                    case "WEBSITE":
                        _WebsiteOrdinal = i; 
                        break;
                    
                    case "CONTPERSON":
                        _ContPersonOrdinal = i; 
                        break;
                    
                    case "CONTMOB":
                        _ContMobOrdinal = i; 
                        break;
                    
                    case "CONTEMAIL":
                        _ContEmailOrdinal = i; 
                        break;
                    
                    case "CTGID":
                        _CTGIdOrdinal = i; 
                        break;
                    
                    case "CREATIONDATE":
                        _CreationDateOrdinal = i; 
                        break;
                    
                    case "PARTNER":
                        _PartnerOrdinal = i; 
                        break;
                    
                    case "USERNAME":
                        _usernameOrdinal = i; 
                        break;
                    
                    case "PASSWORD":
                        _passwordOrdinal = i; 
                        break;
                    
                    case "ROLE":
                        _RoleOrdinal = i; 
                        break;
                    
                    case "ISAPPROVED":
                        _IsApprovedOrdinal = i; 
                        break;
                    
                    case "USERID":
                        _UserIdOrdinal = i; 
                        break;
                    
                }
            }
        }

        #region IReader<ClientMaster> Implementation
        
        public bool Read()
        {
            _ClientMaster = null; 
            return this.sqlDataReader.Read(); 
        }

        public ClientMaster Current
        {
            get
            {
                if(_ClientMaster == null)
                {
                    _ClientMaster = new ClientMaster();
                    if(_CLTIdOrdinal != -1)
                    {
                        _ClientMaster.CLTId = SqlServerHelper.ToInt32(sqlDataReader, _CLTIdOrdinal); 
                    }
                    _ClientMaster.CompId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIdOrdinal); 
                    _ClientMaster.ClientName = SqlServerHelper.ToString(sqlDataReader, _ClientNameOrdinal); 
                    
                    _ClientMaster.ClientCode = SqlServerHelper.ToString(sqlDataReader, _ClientCodeOrdinal); 
                    _ClientMaster.Address1 = SqlServerHelper.ToString(sqlDataReader, _Address1Ordinal); 
                    _ClientMaster.Address2 = SqlServerHelper.ToString(sqlDataReader, _Address2Ordinal); 
                    _ClientMaster.Address3 = SqlServerHelper.ToString(sqlDataReader, _Address3Ordinal); 
                    _ClientMaster.City = SqlServerHelper.ToString(sqlDataReader, _CityOrdinal); 
                    _ClientMaster.Pin = SqlServerHelper.ToString(sqlDataReader, _PinOrdinal); 
                    _ClientMaster.Country = SqlServerHelper.ToString(sqlDataReader, _CountryOrdinal); 
                    _ClientMaster.BusPhone = SqlServerHelper.ToString(sqlDataReader, _BusPhoneOrdinal); 
                    _ClientMaster.BusFax = SqlServerHelper.ToString(sqlDataReader, _BusFaxOrdinal); 
                    _ClientMaster.Website = SqlServerHelper.ToString(sqlDataReader, _WebsiteOrdinal); 
                    _ClientMaster.ContPerson = SqlServerHelper.ToString(sqlDataReader, _ContPersonOrdinal); 
                    _ClientMaster.ContMob = SqlServerHelper.ToString(sqlDataReader, _ContMobOrdinal); 
                    _ClientMaster.ContEmail = SqlServerHelper.ToString(sqlDataReader, _ContEmailOrdinal); 
                    _ClientMaster.CTGId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CTGIdOrdinal); 
                    _ClientMaster.CreationDate = SqlServerHelper.ToNullableDateTime(sqlDataReader, _CreationDateOrdinal); 
                    _ClientMaster.Partner = SqlServerHelper.ToString(sqlDataReader, _PartnerOrdinal); 
                    _ClientMaster.username = SqlServerHelper.ToString(sqlDataReader, _usernameOrdinal); 
                    _ClientMaster.password = SqlServerHelper.ToString(sqlDataReader, _passwordOrdinal); 
                    _ClientMaster.Role = SqlServerHelper.ToString(sqlDataReader, _RoleOrdinal); 
                    _ClientMaster.IsApproved = SqlServerHelper.ToNullableBoolean(sqlDataReader, _IsApprovedOrdinal); 
                    _ClientMaster.UserId = SqlServerHelper.ToNullableGuid(sqlDataReader, _UserIdOrdinal); 
                }
                

                return _ClientMaster; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<ClientMaster> ToList()
        {
            List<ClientMaster> list = new List<ClientMaster>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<ClientMaster> Implementation
        
        public IEnumerator<ClientMaster> GetEnumerator()
        {
            return new ClientMasterEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new ClientMasterEnumerator(this); 
        }

        #endregion
        
        
        private partial class ClientMasterEnumerator : IEnumerator<ClientMaster>
        {
            private IReader<ClientMaster> clientMasterReader;

            public ClientMasterEnumerator(IReader<ClientMaster> clientMasterReader)
            {
                this.clientMasterReader = clientMasterReader; 
            }

            #region IEnumerator<ClientMaster> Members
            
            public ClientMaster Current
            {
                get { return this.clientMasterReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.clientMasterReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.clientMasterReader.Current; }
            }

            public bool MoveNext()
            {
                return this.clientMasterReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of clientmaster reader is not supported."); 
            }

            #endregion
            
        }
    }
}
