// This code was generated by an EVALUATION copy of Schematrix SchemaCoder.
// Redistribution of this source code, or an application developed from it, is forbidden.
// Modification of this source code to remove this comment is also forbidden.
// Please visit http://www.schematrix.com/ to obtain a license to use this software.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.IO;

namespace JTMSProject
{
    public partial class InvoiceTable
    {
        private static IInvoiceTablePersister _DefaultPersister;
        private IInvoiceTablePersister _Persister;
        private int _InvoiceId;
        private string _InvoiceNo;
        private int? _CompId;
        private string _username;
        private DateTime? _Date;
        private string _Period;
        private string _ClientName;
        private string _CLTId;
        private string _Hours;
        private double? _Charges;
        private string _Status;
        private int _IDRec;

        static InvoiceTable()
        {
            // Assign default persister
            _DefaultPersister = new SqlServerInvoiceTablePersister();
        }

        public InvoiceTable()
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 
        }

        public InvoiceTable(int _InvoiceId)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign method parameter to private fields
            this._InvoiceId = _InvoiceId; 

            // Call associated retrieve method
            Retrieve();
        }

        public InvoiceTable(DataRow row)
        {
            // Assign default persister to instance persister
            _Persister = _DefaultPersister; 

            // Assign column values to private members
            for (int  i = 0; i < row.Table.Columns.Count; i++)
            {
                switch (row.Table.Columns[i].ColumnName.ToUpper())
                {
                    case "INVOICEID":
                        this.InvoiceId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        break;
                    
                    case "INVOICENO":
                        this.InvoiceNo = (string)row[i, DataRowVersion.Current]; 
                        break;
                    
                    case "COMPID":
                        if(row.IsNull(i) == false)
                        {
                            this.CompId = Convert.ToInt32(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "USERNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.username = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "DATE":
                        if(row.IsNull(i) == false)
                        {
                            this.Date = Convert.ToDateTime(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "PERIOD":
                        if(row.IsNull(i) == false)
                        {
                            this.Period = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CLIENTNAME":
                        if(row.IsNull(i) == false)
                        {
                            this.ClientName = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CLTID":
                        if(row.IsNull(i) == false)
                        {
                            this.CLTId = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "HOURS":
                        if(row.IsNull(i) == false)
                        {
                            this.Hours = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "CHARGES":
                        if(row.IsNull(i) == false)
                        {
                            this.Charges = Convert.ToDouble(row[i, DataRowVersion.Current]); 
                        }
                        break;
                    
                    case "STATUS":
                        if(row.IsNull(i) == false)
                        {
                            this.Status = (string)row[i, DataRowVersion.Current]; 
                        }
                        break;
                    
                    case "IDRec":

                        this.IDRec = Convert.ToInt32(row[i, DataRowVersion.Current]);
                        break;

                }
            }
        }

        public static IInvoiceTablePersister DefaultPersister
        {
            get { return _DefaultPersister; }
            set { _DefaultPersister = value; }
        }

        public IInvoiceTablePersister Persister
        {
            get { return _Persister; }
            set { _Persister = value; }
        }

        public int InvoiceId
        {
            get { return _InvoiceId; }
            set { _InvoiceId = value; }
        }

        public string  InvoiceNo
        {
            get { return _InvoiceNo; }
            set { _InvoiceNo = value; }
        }

        public int? CompId
        {
            get { return _CompId; }
            set { _CompId = value; }
        }

        public string username
        {
            get { return _username; }
            set { _username = value; }
        }

        public DateTime? Date
        {
            get { return _Date; }
            set { _Date = value; }
        }

        public string Period
        {
            get { return _Period; }
            set { _Period = value; }
        }

        public string ClientName
        {
            get { return _ClientName; }
            set { _ClientName = value; }
        }

        public string CLTId
        {
            get { return _CLTId; }
            set { _CLTId = value; }
        }

        public string Hours
        {
            get { return _Hours; }
            set { _Hours = value; }
        }

        public double? Charges
        {
            get { return _Charges; }
            set { _Charges = value; }
        }

        public string Status
        {
            get { return _Status; }
            set { _Status = value; }
        }

        public int IDRec
        {
            get { return _IDRec; }
            set { _IDRec = value; }
        }

        public virtual void Clone(InvoiceTable sourceObject)
        {
            // Clone attributes from source object
            this._InvoiceId = sourceObject.InvoiceId; 
            this._InvoiceNo = sourceObject.InvoiceNo; 
            this._CompId = sourceObject.CompId; 
            this._username = sourceObject.username; 
            this._Date = sourceObject.Date; 
            this._Period = sourceObject.Period; 
            this._ClientName = sourceObject.ClientName; 
            this._CLTId = sourceObject.CLTId; 
            this._Hours = sourceObject.Hours; 
            this._Charges = sourceObject.Charges; 
            this._Status = sourceObject.Status;
            this._IDRec = sourceObject.IDRec; 
        }

        public virtual int Retrieve()
        {
            return _Persister.Retrieve(this); 
        }

        public virtual int Update()
        {
            return _Persister.Update(this); 
        }

        public virtual int Delete()
        {
            return _Persister.Delete(this); 
        }

        public virtual int Insert()
        {
            return _Persister.Insert(this); 
        }

        public static IReader<InvoiceTable> ListAll()
        {
            return _DefaultPersister.ListAll(); 
        }

    }
    
    public partial interface IInvoiceTablePersister
    {
        int Retrieve(InvoiceTable invoiceTable);
        int Update(InvoiceTable invoiceTable);
        int Delete(InvoiceTable invoiceTable);
        int Insert(InvoiceTable invoiceTable);
        IReader<InvoiceTable> ListAll();
    }
    
    public partial class SqlServerInvoiceTablePersister : SqlPersisterBase, IInvoiceTablePersister
    {
        public SqlServerInvoiceTablePersister()
        {
        }

        public SqlServerInvoiceTablePersister(string connectionString) : base(connectionString)
        {
        }

        public SqlServerInvoiceTablePersister(SqlConnection connection) : base(connection)
        {
        }

        public SqlServerInvoiceTablePersister(SqlTransaction transaction) : base(transaction)
        {
        }

        public int Retrieve(InvoiceTable invoiceTable)
        {
            int __rowsAffected = 1;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("InvoiceTableGet"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vInvoiceId = new SqlParameter("@InvoiceId", SqlDbType.Int);
                    vInvoiceId.Direction = ParameterDirection.InputOutput; 
                    sqlCommand.Parameters.Add(vInvoiceId);
                    SqlParameter vInvoiceNo = new SqlParameter("@InvoiceNo", SqlDbType.VarChar, 150);
                    vInvoiceNo.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vInvoiceNo);
                    SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                    vCompId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCompId);
                    SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 255);
                    vusername.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vusername);
                    SqlParameter vDate = new SqlParameter("@Date", SqlDbType.DateTime);
                    vDate.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vDate);
                    SqlParameter vPeriod = new SqlParameter("@Period", SqlDbType.VarChar, 50);
                    vPeriod.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vPeriod);
                    SqlParameter vClientName = new SqlParameter("@ClientName", SqlDbType.VarChar, 50);
                    vClientName.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vClientName);
                    SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.VarChar, 50);
                    vCLTId.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCLTId);
                    SqlParameter vHours = new SqlParameter("@Hours", SqlDbType.VarChar, 50);
                    vHours.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vHours);
                    SqlParameter vCharges = new SqlParameter("@Charges", SqlDbType.Float);
                    vCharges.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vCharges);
                    SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.VarChar, 50);
                    vStatus.Direction = ParameterDirection.Output; 
                    sqlCommand.Parameters.Add(vStatus);
                    SqlParameter vIDRec = new SqlParameter("@IDRec", SqlDbType.Int );
                    vIDRec.Direction = ParameterDirection.Output;
                    sqlCommand.Parameters.Add(vIDRec);


                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vInvoiceId, invoiceTable.InvoiceId);

                    // Execute command
                    sqlCommand.ExecuteNonQuery();

                    try
                    {
                        // Get output parameter values
                        invoiceTable.InvoiceId = SqlServerHelper.ToInt32(vInvoiceId); 
                        invoiceTable.InvoiceNo = SqlServerHelper.ToString(vInvoiceNo); 
                        invoiceTable.CompId = SqlServerHelper.ToNullableInt32(vCompId); 
                        invoiceTable.username = SqlServerHelper.ToString(vusername); 
                        invoiceTable.Date = SqlServerHelper.ToNullableDateTime(vDate); 
                        invoiceTable.Period = SqlServerHelper.ToString(vPeriod); 
                        invoiceTable.ClientName = SqlServerHelper.ToString(vClientName); 
                        invoiceTable.CLTId = SqlServerHelper.ToString(vCLTId); 
                        invoiceTable.Hours = SqlServerHelper.ToString(vHours); 
                        invoiceTable.Charges = SqlServerHelper.ToNullableDouble(vCharges); 
                        invoiceTable.Status = SqlServerHelper.ToString(vStatus);
                        invoiceTable.IDRec  = SqlServerHelper.ToInt32(vIDRec); 
                    }
                    catch(Exception ex)
                    {
                        if(ex is System.NullReferenceException)
                        {
                            __rowsAffected = 0; 
                        }
                        else
                        {
                            throw ex; 
                        }
                    }
                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Update(InvoiceTable invoiceTable)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("InvoiceTableUpdate"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vInvoiceId = new SqlParameter("@InvoiceId", SqlDbType.Int);
                vInvoiceId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vInvoiceId);
                SqlParameter vInvoiceNo = new SqlParameter("@InvoiceNo", SqlDbType.VarChar,150 );
                vInvoiceNo.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vInvoiceNo);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 255);
                vusername.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vusername);
                SqlParameter vDate = new SqlParameter("@Date", SqlDbType.DateTime);
                vDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDate);
                SqlParameter vPeriod = new SqlParameter("@Period", SqlDbType.VarChar, 50);
                vPeriod.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPeriod);
                SqlParameter vClientName = new SqlParameter("@ClientName", SqlDbType.VarChar, 50);
                vClientName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vClientName);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.VarChar, 50);
                vCLTId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vHours = new SqlParameter("@Hours", SqlDbType.VarChar, 50);
                vHours.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vHours);
                SqlParameter vCharges = new SqlParameter("@Charges", SqlDbType.Float);
                vCharges.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCharges);
                SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.VarChar, 50);
                vStatus.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStatus);
                SqlParameter vIDRec = new SqlParameter("@IDRec", SqlDbType.Int);
                vIDRec.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vIDRec);



                // Set input parameter values
                SqlServerHelper.SetParameterValue(vInvoiceId, invoiceTable.InvoiceId);
                SqlServerHelper.SetParameterValue(vInvoiceNo, invoiceTable.InvoiceNo);
                SqlServerHelper.SetParameterValue(vCompId, invoiceTable.CompId);
                SqlServerHelper.SetParameterValue(vusername, invoiceTable.username);
                SqlServerHelper.SetParameterValue(vDate, invoiceTable.Date);
                SqlServerHelper.SetParameterValue(vPeriod, invoiceTable.Period);
                SqlServerHelper.SetParameterValue(vClientName, invoiceTable.ClientName);
                SqlServerHelper.SetParameterValue(vCLTId, invoiceTable.CLTId);
                SqlServerHelper.SetParameterValue(vHours, invoiceTable.Hours);
                SqlServerHelper.SetParameterValue(vCharges, invoiceTable.Charges);
                SqlServerHelper.SetParameterValue(vStatus, invoiceTable.Status);
                SqlServerHelper.SetParameterValue(vIDRec, invoiceTable.IDRec);


                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Delete(InvoiceTable invoiceTable)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("InvoiceTableDelete"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Add command parameters
                    SqlParameter vInvoiceId = new SqlParameter("@InvoiceId", SqlDbType.Int);
                    vInvoiceId.Direction = ParameterDirection.Input; 
                    sqlCommand.Parameters.Add(vInvoiceId);

                    // Set input parameter values
                    SqlServerHelper.SetParameterValue(vInvoiceId, invoiceTable.InvoiceId);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public int Insert(InvoiceTable invoiceTable)
        {
            int __rowsAffected = 0;
            
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("InvoiceTableInsert"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Add command parameters
                SqlParameter vInvoiceId = new SqlParameter("@InvoiceId", SqlDbType.Int);
                vInvoiceId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vInvoiceId);
                SqlParameter vInvoiceNo = new SqlParameter("@InvoiceNo", SqlDbType.VarChar,150 );
                vInvoiceNo.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vInvoiceNo);
                SqlParameter vCompId = new SqlParameter("@CompId", SqlDbType.Int);
                vCompId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCompId);
                SqlParameter vusername = new SqlParameter("@username", SqlDbType.VarChar, 255);
                vusername.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vusername);
                SqlParameter vDate = new SqlParameter("@Date", SqlDbType.DateTime);
                vDate.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vDate);
                SqlParameter vPeriod = new SqlParameter("@Period", SqlDbType.VarChar, 50);
                vPeriod.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vPeriod);
                SqlParameter vClientName = new SqlParameter("@ClientName", SqlDbType.VarChar, 50);
                vClientName.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vClientName);
                SqlParameter vCLTId = new SqlParameter("@CLTId", SqlDbType.VarChar, 50);
                vCLTId.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCLTId);
                SqlParameter vHours = new SqlParameter("@Hours", SqlDbType.VarChar, 50);
                vHours.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vHours);
                SqlParameter vCharges = new SqlParameter("@Charges", SqlDbType.Float);
                vCharges.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vCharges);
                SqlParameter vStatus = new SqlParameter("@Status", SqlDbType.VarChar, 50);
                vStatus.Direction = ParameterDirection.Input; 
                sqlCommand.Parameters.Add(vStatus);
                SqlParameter vIDRec = new SqlParameter("@ID_Rec", SqlDbType.Int );
                vIDRec.Direction = ParameterDirection.Input;
                sqlCommand.Parameters.Add(vIDRec);


                // Set input parameter values
                SqlServerHelper.SetParameterValue(vInvoiceId, invoiceTable.InvoiceId);
                SqlServerHelper.SetParameterValue(vInvoiceNo, invoiceTable.InvoiceNo);
                SqlServerHelper.SetParameterValue(vCompId, invoiceTable.CompId);
                SqlServerHelper.SetParameterValue(vusername, invoiceTable.username);
                SqlServerHelper.SetParameterValue(vDate, invoiceTable.Date);
                SqlServerHelper.SetParameterValue(vPeriod, invoiceTable.Period);
                SqlServerHelper.SetParameterValue(vClientName, invoiceTable.ClientName);
                SqlServerHelper.SetParameterValue(vCLTId, invoiceTable.CLTId);
                SqlServerHelper.SetParameterValue(vHours, invoiceTable.Hours);
                SqlServerHelper.SetParameterValue(vCharges, invoiceTable.Charges);
                SqlServerHelper.SetParameterValue(vStatus, invoiceTable.Status);
                SqlServerHelper.SetParameterValue(vIDRec, invoiceTable.IDRec);

                try
                {
                    // Attach command
                    AttachCommand(sqlCommand);

                    // Execute command
                    __rowsAffected = sqlCommand.ExecuteNonQuery(); 
                    if(__rowsAffected == 0)
                    {
                        return __rowsAffected; 
                    }
                    

                    // Get output parameter values
                    invoiceTable.InvoiceId = SqlServerHelper.ToInt32(vInvoiceId); 

                }
                finally
                {
                    // Detach command
                    DetachCommand(sqlCommand);
                }

            }
            
            return __rowsAffected; 
        }

        public IReader<InvoiceTable> ListAll()
        {
            // Create command
            using (SqlCommand sqlCommand = new SqlCommand("InvoiceTableListAll"))
            {
                // Set command type
                sqlCommand.CommandType = CommandType.StoredProcedure; 

                // Execute command
                SqlDataReader reader = sqlCommand.ExecuteReader(AttachReaderCommand(sqlCommand));

                // Return reader
                return new SqlServerInvoiceTableReader(reader); 
            }
        }

    }

    public partial class SqlServerInvoiceTableReader : IReader<InvoiceTable>
    {
        private SqlDataReader sqlDataReader;

        private InvoiceTable _InvoiceTable;

        private int _InvoiceIdOrdinal = -1;
        private int _InvoiceNoOrdinal = -1;
        private int _CompIdOrdinal = -1;
        private int _usernameOrdinal = -1;
        private int _DateOrdinal = -1;
        private int _PeriodOrdinal = -1;
        private int _ClientNameOrdinal = -1;
        private int _CLTIdOrdinal = -1;
        private int _HoursOrdinal = -1;
        private int _ChargesOrdinal = -1;
        private int _StatusOrdinal = -1;
        private int _IDRecOrdinal = -1;


        public SqlServerInvoiceTableReader(SqlDataReader sqlDataReader)
        {
            this.sqlDataReader = sqlDataReader; 
            for (int  i = 0; i < sqlDataReader.FieldCount; i++)
            {
                string columnName = sqlDataReader.GetName(i);
                columnName = columnName.ToUpper(); 
                switch (columnName)
                {
                    case "INVOICEID":
                        _InvoiceIdOrdinal = i; 
                        break;
                    
                    case "INVOICENO":
                        _InvoiceNoOrdinal = i; 
                        break;
                    
                    case "COMPID":
                        _CompIdOrdinal = i; 
                        break;
                    
                    case "USERNAME":
                        _usernameOrdinal = i; 
                        break;
                    
                    case "DATE":
                        _DateOrdinal = i; 
                        break;
                    
                    case "PERIOD":
                        _PeriodOrdinal = i; 
                        break;
                    
                    case "CLIENTNAME":
                        _ClientNameOrdinal = i; 
                        break;
                    
                    case "CLTID":
                        _CLTIdOrdinal = i; 
                        break;
                    
                    case "HOURS":
                        _HoursOrdinal = i; 
                        break;
                    
                    case "CHARGES":
                        _ChargesOrdinal = i; 
                        break;
                    
                    case "STATUS":
                        _StatusOrdinal = i; 
                        break;

                    case "IDRec":
                        _IDRecOrdinal = i;
                        break;

                }
            }
        }

        #region IReader<InvoiceTable> Implementation
        
        public bool Read()
        {
            _InvoiceTable = null; 
            return this.sqlDataReader.Read(); 
        }

        public InvoiceTable Current
        {
            get
            {
                if(_InvoiceTable == null)
                {
                    _InvoiceTable = new InvoiceTable();
                    if(_InvoiceIdOrdinal != -1)
                    {
                        _InvoiceTable.InvoiceId = SqlServerHelper.ToInt32(sqlDataReader, _InvoiceIdOrdinal); 
                    }
                    if(_InvoiceNoOrdinal != -1)
                    {
                        _InvoiceTable.InvoiceNo = SqlServerHelper.ToString(sqlDataReader, _InvoiceNoOrdinal); 
                    }
                    _InvoiceTable.CompId = SqlServerHelper.ToNullableInt32(sqlDataReader, _CompIdOrdinal); 
                    _InvoiceTable.username = SqlServerHelper.ToString(sqlDataReader, _usernameOrdinal); 
                    _InvoiceTable.Date = SqlServerHelper.ToNullableDateTime(sqlDataReader, _DateOrdinal); 
                    _InvoiceTable.Period = SqlServerHelper.ToString(sqlDataReader, _PeriodOrdinal); 
                    _InvoiceTable.ClientName = SqlServerHelper.ToString(sqlDataReader, _ClientNameOrdinal); 
                    _InvoiceTable.CLTId = SqlServerHelper.ToString(sqlDataReader, _CLTIdOrdinal); 
                    _InvoiceTable.Hours = SqlServerHelper.ToString(sqlDataReader, _HoursOrdinal); 
                    _InvoiceTable.Charges = SqlServerHelper.ToNullableDouble(sqlDataReader, _ChargesOrdinal); 
                    _InvoiceTable.Status = SqlServerHelper.ToString(sqlDataReader, _StatusOrdinal);
                    _InvoiceTable.IDRec = SqlServerHelper.ToInt32(sqlDataReader, _IDRecOrdinal); 

                }
                

                return _InvoiceTable; 
            }
        }

        public void Close()
        {
            sqlDataReader.Close();
        }

        public List<InvoiceTable> ToList()
        {
            List<InvoiceTable> list = new List<InvoiceTable>();
            while(this.Read())
            {
                list.Add(this.Current);
            }
            this.Close();
            return list; 
        }

        public DataTable ToDataTable()
        {
            DataTable dataTable = new DataTable();
            dataTable.Load(sqlDataReader);
            return dataTable; 
        }

        #endregion
        
        #region IDisposable Implementation
        
        public void Dispose()
        {
            sqlDataReader.Dispose();
        }
        #endregion
        
        #region IEnumerable<InvoiceTable> Implementation
        
        public IEnumerator<InvoiceTable> GetEnumerator()
        {
            return new InvoiceTableEnumerator(this); 
        }

        #endregion
        
        #region IEnumerable Implementation
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return new InvoiceTableEnumerator(this); 
        }

        #endregion
        
        
        private partial class InvoiceTableEnumerator : IEnumerator<InvoiceTable>
        {
            private IReader<InvoiceTable> invoiceTableReader;

            public InvoiceTableEnumerator(IReader<InvoiceTable> invoiceTableReader)
            {
                this.invoiceTableReader = invoiceTableReader; 
            }

            #region IEnumerator<InvoiceTable> Members
            
            public InvoiceTable Current
            {
                get { return this.invoiceTableReader.Current; }
            }

            #endregion
            
            #region IDisposable Members
            
            public void Dispose()
            {
                this.invoiceTableReader.Dispose();
            }

            #endregion
            
            #region IEnumerator Members
            
            object IEnumerator.Current
            {
                get { return this.invoiceTableReader.Current; }
            }

            public bool MoveNext()
            {
                return this.invoiceTableReader.Read(); 
            }

            public void Reset()
            {
                throw new Exception("Reset of invoicetable reader is not supported."); 
            }

            #endregion
            
        }
    }
}
